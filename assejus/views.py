from django.shortcuts import render, get_object_or_404, redirect
from django.template.loader import render_to_string
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from django.core.paginator import Paginator
from django.db.models import Q, Count, Case, When, IntegerField, Value
from django.utils import timezone
from django.urls import reverse
from datetime import date, timedelta, datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.units import inch
from reportlab.lib import colors
import os


def get_logo_path(filename):
    """
    Retorna o caminho correto para a logo, tentando primeiro em static (desenvolvimento)
    e depois em staticfiles (produ√ß√£o)
    """
    from django.conf import settings
    
    # Tentar primeiro no diret√≥rio static (desenvolvimento)
    logo_path = os.path.join(settings.BASE_DIR, 'static', filename)
    if os.path.exists(logo_path):
        return logo_path
    
    # Se n√£o existir, tentar no staticfiles (produ√ß√£o)
    logo_path = os.path.join(settings.STATIC_ROOT, filename)
    if os.path.exists(logo_path):
        return logo_path
    
    return None
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import io
import os
from django.conf import settings
from .models import (
    Advogado, AtendimentoJuridico, DocumentoJuridico, 
    Andamento, ConsultaJuridica, RelatorioJuridico, ProcessoJuridico,
    ProcuracaoAdJudicia, ModeloPoderes
)
from .forms import (
    AdvogadoForm, AtendimentoJuridicoForm,
    AndamentoForm, ConsultaJuridicaForm, RelatorioJuridicoForm, ProcessoJuridicoForm,
    ProcuracaoAdJudiciaForm
)

User = get_user_model()
from core.permissions import (
    AssejusAccessMixin, AssejusFullAccessMixin,
    require_user_type, require_permission
)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def index(request):
    """P√°gina principal do app ASEJUS"""
    # Estat√≠sticas b√°sicas para a p√°gina principal
    total_advogados = Advogado.objects.filter(ativo=True).count()
    total_atendimentos = AtendimentoJuridico.objects.count()
    total_consultas = ConsultaJuridica.objects.count()
    total_documentos = DocumentoJuridico.objects.count()
    total_andamentos = Andamento.objects.count()
    total_relatorios = RelatorioJuridico.objects.count()
    
    context = {
        'total_advogados': total_advogados,
        'total_atendimentos': total_atendimentos,
        'total_consultas': total_consultas,
        'total_documentos': total_documentos,
        'total_andamentos': total_andamentos,
        'total_relatorios': total_relatorios,
    }
    
    return render(request, 'assejus/index.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def dashboard(request):
    """Dashboard principal do app ASEJUS"""
    # Estat√≠sticas b√°sicas
    total_advogados = Advogado.objects.filter(ativo=True).count()
    total_atendimentos = AtendimentoJuridico.objects.count()
    atendimentos_em_andamento = AtendimentoJuridico.objects.filter(status='em_andamento').count()
    consultas_pendentes = ConsultaJuridica.objects.filter(resolvida=False).count()
    
    # Atendimentos recentes
    atendimentos_recentes = AtendimentoJuridico.objects.select_related('advogado_responsavel').order_by('-data_abertura')[:5]
    
    # Consultas recentes
    consultas_recentes = ConsultaJuridica.objects.order_by('-data_consulta')[:5]
    
    # Gr√°fico de atendimentos por tipo
    atendimentos_por_tipo = AtendimentoJuridico.objects.values('tipo_demanda').annotate(
        total=Count('id')
    ).order_by('-total')
    
    # Estat√≠sticas adicionais
    total_documentos = DocumentoJuridico.objects.count()
    total_andamentos = Andamento.objects.count()
    total_relatorios = RelatorioJuridico.objects.count()
    
    # Atendimentos por prioridade
    atendimentos_urgentes = AtendimentoJuridico.objects.filter(prioridade='alta').count()
    atendimentos_medias = AtendimentoJuridico.objects.filter(prioridade='media').count()
    atendimentos_baixas = AtendimentoJuridico.objects.filter(prioridade='baixa').count()
    
    # Consultas por status
    consultas_pendentes = ConsultaJuridica.objects.exclude(status='respondida').count()
    
    context = {
        'total_advogados': total_advogados,
        'total_atendimentos': total_atendimentos,
        'atendimentos_em_andamento': atendimentos_em_andamento,
        'consultas_pendentes': consultas_pendentes,
        'atendimentos_recentes': atendimentos_recentes,
        'consultas_recentes': consultas_recentes,
        'atendimentos_por_tipo': atendimentos_por_tipo,
        'total_documentos': total_documentos,
        'total_andamentos': total_andamentos,
        'total_relatorios': total_relatorios,
        'atendimentos_urgentes': atendimentos_urgentes,
        'atendimentos_medias': atendimentos_medias,
        'atendimentos_baixas': atendimentos_baixas,
    }
    
    return render(request, 'assejus/dashboard.html', context)


# Views para Advogados
@require_user_type(['administrador_sistema', 'advogado'])
def advogado_list(request):
    """Lista de advogados com filtros avan√ßados"""
    from .forms import AdvogadoSearchForm
    
    # Inicializar formul√°rio de pesquisa
    search_form = AdvogadoSearchForm(request.GET)
    
    # Verificar se √© admin/superuser ou advogado espec√≠fico
    is_admin_or_superuser = (request.user.tipo_usuario == 'administrador_sistema' or 
                            request.user.is_superuser)
    
    print(f"üîç DEBUG: Usu√°rio {request.user.username}")
    print(f"   Tipo: {request.user.tipo_usuario}")
    print(f"   √â superuser: {request.user.is_superuser}")
    print(f"   √â admin/superuser: {is_admin_or_superuser}")
    
    # Se √© advogado comum (n√£o admin/superuser), redirecionar para seu perfil
    if request.user.tipo_usuario == 'advogado' and not is_admin_or_superuser:
        try:
            # Buscar o advogado associado ao usu√°rio
            advogado = Advogado.objects.get(user=request.user)
            print(f"üîí Usu√°rio advogado {request.user.username} - Redirecionando para pr√≥prio perfil: {advogado.nome}")
            
            # Redirecionar para o perfil do advogado
            return redirect('assejus:advogado_detail', pk=advogado.pk)
            
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Usu√°rio {request.user.username} √© do tipo 'advogado' mas n√£o tem registro na tabela Advogado")
            messages.error(request, 'Usu√°rio advogado n√£o encontrado. Contate o administrador.')
            return redirect('assejus:dashboard')
        except Exception as e:
            print(f"‚ùå Erro ao buscar advogado para usu√°rio {request.user.username}: {e}")
            messages.error(request, f'Erro ao carregar perfil: {str(e)}')
            return redirect('assejus:dashboard')
    else:
        # Admin/Superuser - mostrar lista completa
        advogados = Advogado.objects.all()
        print(f"üîç Administrador/Superuser {request.user.username} - Mostrando lista completa de advogados")
    
    # Aplicar filtros se o formul√°rio for v√°lido (apenas para administradores)
    if search_form.is_valid() and is_admin_or_superuser:
        nome = search_form.cleaned_data.get('nome')
        cpf = search_form.cleaned_data.get('cpf')
        oab = search_form.cleaned_data.get('oab')
        uf_oab = search_form.cleaned_data.get('uf_oab')
        situacao = search_form.cleaned_data.get('situacao')
        estado = search_form.cleaned_data.get('estado')
        ativo = search_form.cleaned_data.get('ativo')
        
        if nome:
            advogados = advogados.filter(nome__icontains=nome)
        
        if cpf:
            advogados = advogados.filter(cpf__icontains=cpf)
        
        if oab:
            advogados = advogados.filter(oab__icontains=oab)
        
        if uf_oab:
            advogados = advogados.filter(uf_oab=uf_oab)
        
        if situacao:
            advogados = advogados.filter(situacao=situacao)
        
        if estado:
            advogados = advogados.filter(estado=estado)
        
        if ativo:
            if ativo == 'true':
                advogados = advogados.filter(ativo=True)
            elif ativo == 'false':
                advogados = advogados.filter(ativo=False)
    
    # Ordenar por nome
    advogados = advogados.order_by('nome')
    
    # Estat√≠sticas
    total_advogados = Advogado.objects.count()
    advogados_ativos = Advogado.objects.filter(ativo=True).count()
    
    # Pagina√ß√£o
    paginator = Paginator(advogados, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'advogados': page_obj.object_list,  # Lista de advogados para o template
        'page_obj': page_obj,               # Objeto de pagina√ß√£o
        'search_form': search_form,         # Formul√°rio de pesquisa
        'total_advogados': total_advogados, # Total de advogados
        'advogados_ativos': advogados_ativos, # Total de advogados ativos
        'is_paginated': page_obj.has_other_pages(), # Se h√° pagina√ß√£o
        'has_advogados': advogados.exists(), # Se h√° advogados para exibir
        'is_admin_view': is_admin_or_superuser, # Flag para identificar se √© visualiza√ß√£o de admin
    }
    
    return render(request, 'assejus/advogado_list.html', context)


@require_user_type(['administrador_sistema', 'advogado'])
def advogado_create(request):
    """Criar novo advogado"""
    # RESTRI√á√ÉO: Usu√°rio advogado n√£o pode criar novos advogados
    if request.user.tipo_usuario == 'advogado':
        print(f"üö´ Acesso negado: Usu√°rio advogado {request.user.username} tentou criar novo advogado")
        messages.error(request, 'Voc√™ n√£o tem permiss√£o para criar novos advogados.')
        return redirect('assejus:advogado_list')
    
    if request.method == 'POST':
        form = AdvogadoForm(request.POST, request.FILES)
        if form.is_valid():
            advogado = form.save()
            messages.success(request, 'Advogado criado com sucesso!')
            return redirect('assejus:advogado_detail', pk=advogado.pk)
    else:
        form = AdvogadoForm()
    
    context = {
        'form': form,
        'title': 'Novo Advogado',
        'action': 'Criar',
    }
    
    return render(request, 'assejus/advogado_form.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def advogado_detail(request, pk):
    """View para exibir detalhes completos do advogado"""
    try:
        advogado = get_object_or_404(Advogado, pk=pk)
        
        # Calcular estat√≠sticas do advogado
        total_casos = AtendimentoJuridico.objects.filter(advogado_responsavel=advogado).count()
        casos_em_andamento = AtendimentoJuridico.objects.filter(
            advogado_responsavel=advogado,
            status__in=['em_andamento', 'em_analise', 'aguardando_documentos', 'aguardando_decisao']
        ).count()
        casos_concluidos = AtendimentoJuridico.objects.filter(
            advogado_responsavel=advogado,
            status='concluido'
        ).count()
        
        # Buscar atendimentos do advogado
        atendimentos = AtendimentoJuridico.objects.filter(
            advogado_responsavel=advogado
        ).select_related('associado').order_by('-data_abertura')
        
        context = {
            'advogado': advogado,
            'total_casos': total_casos,
            'casos_em_andamento': casos_em_andamento,
            'casos_concluidos': casos_concluidos,
            'atendimentos': atendimentos,
        }
        
        return render(request, 'assejus/advogado_detail.html', context)
        
    except Exception as e:
        print(f"‚ùå Erro na view advogado_detail: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        
        # Redirecionar para lista com mensagem de erro
        messages.error(request, f'Erro ao carregar detalhes do advogado: {str(e)}')
        return redirect('assejus:advogado_list')


@require_user_type(['administrador_sistema', 'advogado'])
def advogado_update(request, pk):
    """Editar advogado"""
    advogado = get_object_or_404(Advogado, pk=pk)
    
    # RESTRI√á√ÉO: Usu√°rio advogado s√≥ pode editar seu pr√≥prio cadastro
    if request.user.tipo_usuario == 'advogado':
        try:
            # Buscar o advogado associado ao usu√°rio
            advogado_usuario = Advogado.objects.get(user=request.user)
            
            # Verificar se o advogado a ser editado √© o pr√≥prio usu√°rio
            if advogado.pk != advogado_usuario.pk:
                print(f"üö´ Acesso negado: Usu√°rio advogado {request.user.username} tentou editar cadastro de outro advogado {pk}")
                messages.error(request, 'Voc√™ n√£o tem permiss√£o para editar este cadastro.')
                return redirect('assejus:advogado_list')
                
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Usu√°rio {request.user.username} √© do tipo 'advogado' mas n√£o tem registro na tabela Advogado")
            messages.error(request, 'Erro de configura√ß√£o: Usu√°rio advogado n√£o encontrado.')
            return redirect('assejus:advogado_list')
        except Exception as e:
            print(f"‚ùå Erro ao verificar permiss√£o do advogado: {e}")
            messages.error(request, 'Erro ao verificar permiss√µes.')
            return redirect('assejus:advogado_list')
    
    if request.method == 'POST':
        form = AdvogadoForm(request.POST, request.FILES, instance=advogado)
        if form.is_valid():
            form.save()
            messages.success(request, 'Advogado atualizado com sucesso!')
            return redirect('assejus:advogado_detail', pk=advogado.pk)
        else:
            messages.error(request, 'Por favor, corrija os erros no formul√°rio.')
    else:
        # Garante que todos os dados sejam carregados corretamente
        form = AdvogadoForm(instance=advogado)
        
        # Debug para verificar os dados carregados
        print(f"DEBUG: Dados do advogado carregados:")
        print(f"DEBUG: Nome: {advogado.nome}")
        print(f"DEBUG: Data inscri√ß√£o OAB: {advogado.data_inscricao_oab}")
        print(f"DEBUG: UF OAB: {advogado.uf_oab}")
        print(f"DEBUG: Estado: {advogado.estado}")
        print(f"DEBUG: CPF: {advogado.cpf}")
        print(f"DEBUG: OAB: {advogado.oab}")
        print(f"DEBUG: Email: {advogado.email}")
        print(f"DEBUG: Telefone: {advogado.telefone}")
        print(f"DEBUG: Celular: {advogado.celular}")
        print(f"DEBUG: Endere√ßo: {advogado.endereco}")
        print(f"DEBUG: Cidade: {advogado.cidade}")
        print(f"DEBUG: CEP: {advogado.cep}")
        print(f"DEBUG: Especialidades: {advogado.especialidades}")
        print(f"DEBUG: Experi√™ncia anos: {advogado.experiencia_anos}")
        print(f"DEBUG: Ativo: {advogado.ativo}")
        print(f"DEBUG: Observa√ß√µes: {advogado.observacoes}")
        
        # Verifica se o formul√°rio foi inicializado corretamente
        print(f"DEBUG: Formul√°rio inicializado:")
        print(f"DEBUG: Form data_inscricao_oab initial: {form.initial.get('data_inscricao_oab')}")
        print(f"DEBUG: Form uf_oab choices: {form.fields['uf_oab'].choices}")
        print(f"DEBUG: Form estado choices: {form.fields['estado'].choices}")
    
    context = {
        'form': form,
        'advogado': advogado,
        'title': 'Editar Advogado',
        'action': 'Atualizar',
    }
    
    return render(request, 'assejus/advogado_form.html', context)


@require_user_type(['administrador_sistema', 'advogado'])
def advogado_debug(request, pk):
    """Debug do formul√°rio de advogado"""
    advogado = get_object_or_404(Advogado, pk=pk)
    form = AdvogadoForm(instance=advogado)
    
    context = {
        'form': form,
        'advogado': advogado,
        'title': 'Debug - Editar Advogado',
        'action': 'Debug',
    }
    
    return render(request, 'assejus/advogado_form_debug.html', context)


@require_user_type(['administrador_sistema'])
def advogado_delete(request, pk):
    """Excluir advogado"""
    advogado = get_object_or_404(Advogado, pk=pk)
    
    if request.method == 'POST':
        advogado.delete()
        messages.success(request, 'Advogado exclu√≠do com sucesso!')
        return redirect('assejus:advogado_list')
    
    context = {
        'advogado': advogado,
    }
    
    return render(request, 'assejus/advogado_confirm_delete.html', context)


# Views para Atendimentos Jur√≠dicos
@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def atendimento_list(request):
    """Lista de atendimentos jur√≠dicos"""
    search = request.GET.get('search', '')
    status = request.GET.get('status', '')
    tipo_demanda = request.GET.get('tipo_demanda', '')
    
    # Base inicial de atendimentos
    atendimentos = AtendimentoJuridico.objects.all()
    
    # RESTRI√á√ÉO: Usu√°rio advogado s√≥ v√™ atendimentos onde ele √© respons√°vel
    if request.user.tipo_usuario == 'advogado':
        try:
            # Buscar o advogado associado ao usu√°rio
            advogado = Advogado.objects.get(user=request.user)
            print(f"üîí Usu√°rio advogado {request.user.username} - Restringindo para atendimentos do advogado {advogado.nome}")
            
            # Filtrar apenas atendimentos onde o advogado √© respons√°vel
            atendimentos = atendimentos.filter(advogado_responsavel=advogado)
            
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Usu√°rio {request.user.username} √© do tipo 'advogado' mas n√£o tem registro na tabela Advogado")
            # Se n√£o encontrar o advogado, n√£o mostrar nenhum atendimento
            atendimentos = AtendimentoJuridico.objects.none()
        except Exception as e:
            print(f"‚ùå Erro ao buscar advogado para usu√°rio {request.user.username}: {e}")
            atendimentos = AtendimentoJuridico.objects.none()
    
    # Aplicar filtros de busca
    if search:
        atendimentos = atendimentos.filter(
            Q(titulo__icontains=search) |
            Q(associado__nome__icontains=search) |
            Q(descricao__icontains=search)
        )
    
    if status:
        atendimentos = atendimentos.filter(status=status)
    
    if tipo_demanda:
        atendimentos = atendimentos.filter(tipo_demanda=tipo_demanda)
    
    # Ordena√ß√£o: primeiro por status (conclu√≠dos por √∫ltimo), depois por data de abertura
    atendimentos = atendimentos.order_by(
        Case(
            When(status='concluido', then=Value(1)),
            default=Value(0),
            output_field=IntegerField(),
        ),
        '-data_abertura'
    )
    
    # Estat√≠sticas para o contexto
    total_atendimentos = atendimentos.count()
    atendimentos_ativos = atendimentos.exclude(status='concluido').count()
    atendimentos_concluidos = atendimentos.filter(status='concluido').count()
    
    # Verifica se h√° transi√ß√£o entre ativos e conclu√≠dos
    tem_transicao = atendimentos_ativos > 0 and atendimentos_concluidos > 0
    
    # Pagina√ß√£o
    paginator = Paginator(atendimentos, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'atendimentos': page_obj,
        'page_obj': page_obj,
        'search': search,
        'status': status,
        'tipo_demanda': tipo_demanda,
        'total_atendimentos': total_atendimentos,
        'atendimentos_ativos': atendimentos_ativos,
        'atendimentos_concluidos': atendimentos_concluidos,
        'tem_transicao': tem_transicao,
        'is_advogado_restricted': request.user.tipo_usuario == 'advogado',
    }
    
    return render(request, 'assejus/atendimento_list.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def atendimento_create(request):
    """Criar novo atendimento jur√≠dico"""
    if request.method == 'POST':
        form = AtendimentoJuridicoForm(request.POST)
        if form.is_valid():
            atendimento = form.save(commit=False)
            atendimento.usuario_responsavel = request.user
            atendimento.save()
            form.save_m2m()
            messages.success(request, 'Atendimento criado com sucesso!')
            return redirect('assejus:atendimento_detail', pk=atendimento.pk)
    else:
        form = AtendimentoJuridicoForm()
    
    context = {
        'form': form,
        'title': 'Novo Atendimento Jur√≠dico',
        'action': 'Criar',
    }
    
    return render(request, 'assejus/atendimento_form.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def atendimento_detail(request, pk):
    """Detalhes do atendimento jur√≠dico - redireciona para processo se existir"""
    atendimento = get_object_or_404(AtendimentoJuridico, pk=pk)
    
    # Se o atendimento tem n√∫mero de processo, redirecionar para a p√°gina do processo
    if atendimento.numero_processo:
        try:
            # Buscar processo pelo n√∫mero
            processo = ProcessoJuridico.objects.get(numero_processo=atendimento.numero_processo)
            # Redirecionar para a p√°gina do processo
            return redirect('assejus:processo_detail', pk=processo.pk)
        except ProcessoJuridico.DoesNotExist:
            # Processo n√£o existe ainda, mostrar p√°gina de atendimento com aviso
            pass
    
    # Se n√£o tem processo ou processo n√£o existe, mostrar p√°gina de atendimento
    context = {
        'atendimento': atendimento,
    }
    
    return render(request, 'assejus/atendimento_detail.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def atendimento_update(request, pk):
    """Editar atendimento jur√≠dico"""
    atendimento = get_object_or_404(AtendimentoJuridico, pk=pk)
    
    # RESTRI√á√ÉO: Usu√°rio advogado s√≥ pode editar atendimentos onde ele √© respons√°vel
    if request.user.tipo_usuario == 'advogado':
        try:
            # Buscar o advogado associado ao usu√°rio
            advogado = Advogado.objects.get(user=request.user)
            
            # Verificar se o atendimento pertence ao advogado
            if atendimento.advogado_responsavel != advogado:
                print(f"üö´ Acesso negado: Usu√°rio advogado {request.user.username} tentou editar atendimento {pk} de outro advogado")
                messages.error(request, 'Voc√™ n√£o tem permiss√£o para editar este atendimento.')
                return redirect('assejus:atendimento_list')
                
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Usu√°rio {request.user.username} √© do tipo 'advogado' mas n√£o tem registro na tabela Advogado")
            messages.error(request, 'Erro de configura√ß√£o: Usu√°rio advogado n√£o encontrado.')
            return redirect('assejus:atendimento_list')
        except Exception as e:
            print(f"‚ùå Erro ao verificar permiss√£o do advogado: {e}")
            messages.error(request, 'Erro ao verificar permiss√µes.')
            return redirect('assejus:atendimento_list')
    
    if request.method == 'POST':
        form = AtendimentoJuridicoForm(request.POST, instance=atendimento)
        if form.is_valid():
            # RESTRI√á√ÉO: Para usu√°rio advogado, garantir que o advogado respons√°vel n√£o seja alterado
            if request.user.tipo_usuario == 'advogado':
                try:
                    advogado = Advogado.objects.get(user=request.user)
                    form.instance.advogado_responsavel = advogado
                    print(f"üîí Mantendo advogado respons√°vel como {advogado.nome}")
                except Exception as e:
                    print(f"‚ùå Erro ao manter advogado respons√°vel: {e}")
            
            form.save()
            messages.success(request, 'Atendimento atualizado com sucesso!')
            return redirect('assejus:atendimento_detail', pk=atendimento.pk)
    else:
        form = AtendimentoJuridicoForm(instance=atendimento)
        
        # RESTRI√á√ÉO: Para usu√°rio advogado, restringir campo advogado_responsavel
        if request.user.tipo_usuario == 'advogado':
            try:
                advogado = Advogado.objects.get(user=request.user)
                form.fields['advogado_responsavel'].queryset = Advogado.objects.filter(pk=advogado.pk)
                form.fields['advogado_responsavel'].widget.attrs['readonly'] = True
                print(f"üîí Campo advogado respons√°vel restrito para {advogado.nome}")
            except Exception as e:
                print(f"‚ùå Erro ao restringir campo advogado respons√°vel: {e}")
    
    context = {
        'form': form,
        'atendimento': atendimento,
        'title': 'Editar Atendimento Jur√≠dico',
        'action': 'Atualizar',
    }
    
    return render(request, 'assejus/atendimento_form.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def atendimento_finalizar(request, pk):
    """Finalizar atendimento jur√≠dico"""
    atendimento = get_object_or_404(AtendimentoJuridico, pk=pk)
    
    # RESTRI√á√ÉO: Usu√°rio advogado s√≥ pode finalizar atendimentos onde ele √© respons√°vel
    if request.user.tipo_usuario == 'advogado':
        try:
            # Buscar o advogado associado ao usu√°rio
            advogado = Advogado.objects.get(user=request.user)
            
            # Verificar se o atendimento pertence ao advogado
            if atendimento.advogado_responsavel != advogado:
                print(f"üö´ Acesso negado: Usu√°rio advogado {request.user.username} tentou finalizar atendimento {pk} de outro advogado")
                messages.error(request, 'Voc√™ n√£o tem permiss√£o para finalizar este atendimento.')
                return redirect('assejus:atendimento_list')
                
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Usu√°rio {request.user.username} √© do tipo 'advogado' mas n√£o tem registro na tabela Advogado")
            messages.error(request, 'Erro de configura√ß√£o: Usu√°rio advogado n√£o encontrado.')
            return redirect('assejus:atendimento_list')
        except Exception as e:
            print(f"‚ùå Erro ao verificar permiss√£o do advogado: {e}")
            messages.error(request, 'Erro ao verificar permiss√µes.')
            return redirect('assejus:atendimento_list')
    
    if request.method == 'POST':
        # Verifica se o atendimento j√° n√£o est√° finalizado
        if atendimento.status == 'concluido':
            messages.warning(request, 'Este atendimento j√° est√° finalizado.')
        else:
            # Atualiza o status para conclu√≠do
            atendimento.status = 'concluido'
            atendimento.data_conclusao = timezone.now()
            atendimento.save()
            
            messages.success(request, 'Atendimento finalizado com sucesso!')
        
        return redirect('assejus:atendimento_detail', pk=atendimento.pk)
    
    context = {
        'atendimento': atendimento,
        'title': 'Finalizar Atendimento',
    }
    
    return render(request, 'assejus/atendimento_confirm_finalizar.html', context)


@login_required
def atendimento_delete(request, pk):
    """Excluir atendimento jur√≠dico"""
    atendimento = get_object_or_404(AtendimentoJuridico, pk=pk)
    
    # RESTRI√á√ÉO: Usu√°rio advogado s√≥ pode excluir atendimentos onde ele √© respons√°vel
    if request.user.tipo_usuario == 'advogado':
        try:
            # Buscar o advogado associado ao usu√°rio
            advogado = Advogado.objects.get(user=request.user)
            
            # Verificar se o atendimento pertence ao advogado
            if atendimento.advogado_responsavel != advogado:
                print(f"üö´ Acesso negado: Usu√°rio advogado {request.user.username} tentou excluir atendimento {pk} de outro advogado")
                if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                    return JsonResponse({
                        'success': False,
                        'message': 'Voc√™ n√£o tem permiss√£o para excluir este atendimento.'
                    })
                else:
                    messages.error(request, 'Voc√™ n√£o tem permiss√£o para excluir este atendimento.')
                    return redirect('assejus:atendimento_list')
                
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Usu√°rio {request.user.username} √© do tipo 'advogado' mas n√£o tem registro na tabela Advogado")
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': False,
                    'message': 'Erro de configura√ß√£o: Usu√°rio advogado n√£o encontrado.'
                })
            else:
                messages.error(request, 'Erro de configura√ß√£o: Usu√°rio advogado n√£o encontrado.')
                return redirect('assejus:atendimento_list')
        except Exception as e:
            print(f"‚ùå Erro ao verificar permiss√£o do advogado: {e}")
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': False,
                    'message': 'Erro ao verificar permiss√µes.'
                })
            else:
                messages.error(request, 'Erro ao verificar permiss√µes.')
                return redirect('assejus:atendimento_list')
    
    if request.method == 'POST':
        try:
            atendimento.delete()
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': True,
                    'message': 'Atendimento exclu√≠do com sucesso!'
                })
            else:
                messages.success(request, 'Atendimento exclu√≠do com sucesso!')
                return redirect('assejus:atendimento_list')
        except Exception as e:
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': False,
                    'message': f'Erro ao excluir atendimento: {str(e)}'
                })
            else:
                messages.error(request, f'Erro ao excluir atendimento: {str(e)}')
                return redirect('assejus:atendimento_list')
    
    # Se n√£o for POST, mostrar confirma√ß√£o
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    else:
        context = {
            'atendimento': atendimento,
        }
        return render(request, 'assejus/atendimento_confirm_delete.html', context)


@login_required
def atendimento_delete_ajax(request, pk):
    """Excluir atendimento jur√≠dico via AJAX"""
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    try:
        atendimento = get_object_or_404(AtendimentoJuridico, pk=pk)
        atendimento.delete()
        return JsonResponse({
            'success': True,
            'message': 'Atendimento exclu√≠do com sucesso!'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'Erro ao excluir atendimento: {str(e)}'
        })


# =============================================================================
# VIEWS PARA SISTEMA DE DOCUMENTOS DE PROCESSOS JUR√çDICOS
# =============================================================================

@login_required
def documento_list(request):
    """
    Lista de documentos jur√≠dicos com filtros avan√ßados
    Sistema completo de busca e pagina√ß√£o
    """
    from core.forms import DocumentoProcessoSearchForm
    
    # Inicializar formul√°rio de busca
    search_form = DocumentoProcessoSearchForm(request.GET)
    
    # Query base
    documentos = DocumentoJuridico.objects.select_related(
        'processo', 'usuario_upload', 'processo__parte_cliente'
    ).all()
    
    # Aplicar filtros se formul√°rio for v√°lido
    if search_form.is_valid():
        search = search_form.cleaned_data.get('search', '').strip()
        tipo_documento = search_form.cleaned_data.get('tipo_documento')
        processo = search_form.cleaned_data.get('processo')
        data_inicio = search_form.cleaned_data.get('data_inicio')
        data_fim = search_form.cleaned_data.get('data_fim')
        usuario_upload = search_form.cleaned_data.get('usuario_upload')
        
        # Filtro de busca textual
        if search:
            documentos = documentos.filter(
                Q(titulo__icontains=search) |
                Q(descricao__icontains=search) |
                Q(processo__numero_processo__icontains=search) |
                Q(processo__parte_cliente__nome__icontains=search)
            )
        
        # Filtros espec√≠ficos
        if tipo_documento:
            documentos = documentos.filter(tipo_documento=tipo_documento)
        
        if processo:
            documentos = documentos.filter(processo=processo)
        
        if data_inicio:
            documentos = documentos.filter(data_upload__date__gte=data_inicio)
        
        if data_fim:
            documentos = documentos.filter(data_upload__date__lte=data_fim)
        
        if usuario_upload:
            documentos = documentos.filter(usuario_upload=usuario_upload)
    
    # Ordena√ß√£o
    documentos = documentos.order_by('-data_upload')
    
    # Pagina√ß√£o
    paginator = Paginator(documentos, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # Estat√≠sticas
    total_documentos = DocumentoJuridico.objects.count()
    documentos_hoje = DocumentoJuridico.objects.filter(
        data_upload__date=timezone.now().date()
    ).count()
    
    context = {
        'page_obj': page_obj,
        'search_form': search_form,
        'total_documentos': total_documentos,
        'documentos_hoje': documentos_hoje,
        'title': 'Documentos Jur√≠dicos',
    }
    
    return render(request, 'assejus/documento_list.html', context)


@login_required
def documento_create(request):
    """
    Criar novo documento jur√≠dico
    Upload √∫nico
    """
    from core.forms import DocumentoProcessoForm
    
    processo_id = request.GET.get('processo')
    
    if request.method == 'POST':
        form = DocumentoProcessoForm(
            request.POST, 
            request.FILES, 
            processo_id=processo_id,
            usuario=request.user
        )
        
        if form.is_valid():
            try:
                documento = form.save()
                messages.success(request, 'Documento criado com sucesso!')
                
                # Redirecionar baseado no contexto
                if processo_id:
                    return redirect('assejus:processo_detail', pk=processo_id)
                else:
                    return redirect('assejus:documento_list')
                    
            except Exception as e:
                messages.error(request, f'Erro ao criar documento: {str(e)}')
                print(f"‚ùå Erro ao criar documento: {e}")
                import traceback
                traceback.print_exc()
    else:
        form = DocumentoProcessoForm(
            processo_id=processo_id,
            usuario=request.user
        )
    
    # Buscar informa√ß√µes do processo se fornecido
    processo_info = None
    if processo_id:
        try:
            processo_info = ProcessoJuridico.objects.get(pk=processo_id)
        except ProcessoJuridico.DoesNotExist:
            messages.error(request, 'Processo n√£o encontrado.')
            return redirect('assejus:documento_list')
    
    context = {
        'form': form,
        'title': 'Novo Documento Jur√≠dico',
        'action': 'Criar',
        'processo_id': processo_id,
        'processo_info': processo_info,
    }
    
    return render(request, 'assejus/documento_form.html', context)


@login_required
def documento_detail(request, pk):
    """
    Detalhes do documento jur√≠dico
    Inclui informa√ß√µes de metadados e hist√≥rico
    """
    documento = get_object_or_404(
        DocumentoJuridico.objects.select_related(
            'processo', 'usuario_upload', 'processo__parte_cliente'
        ), 
        pk=pk
    )
    
    # Verificar permiss√µes (opcional - implementar conforme necess√°rio)
    # if not request.user.has_perm('assejus.view_documentojuridico'):
    #     messages.error(request, 'Voc√™ n√£o tem permiss√£o para visualizar este documento.')
    #     return redirect('assejus:documento_list')
    
    context = {
        'documento': documento,
        'title': f'Documento: {documento.titulo}',
    }
    
    return render(request, 'assejus/documento_detail.html', context)


@login_required
def documento_update(request, pk):
    """
    Editar documento jur√≠dico
    Permite editar metadados e substituir arquivo
    """
    from core.forms import DocumentoProcessoEditForm, DocumentoProcessoReplaceForm
    
    documento = get_object_or_404(DocumentoJuridico, pk=pk)
    acao = request.GET.get('acao', 'editar')  # 'editar' ou 'substituir'
    
    if request.method == 'POST':
        if acao == 'substituir':
            form = DocumentoProcessoReplaceForm(request.POST, request.FILES, instance=documento)
        else:
            form = DocumentoProcessoEditForm(request.POST, instance=documento)
        
        if form.is_valid():
            try:
                form.save()
                messages.success(request, 'Documento atualizado com sucesso!')
                return redirect('assejus:documento_detail', pk=documento.pk)
            except Exception as e:
                messages.error(request, f'Erro ao atualizar documento: {str(e)}')
                print(f"‚ùå Erro ao atualizar documento: {e}")
    else:
        if acao == 'substituir':
            form = DocumentoProcessoReplaceForm(instance=documento)
        else:
            form = DocumentoProcessoEditForm(instance=documento)
    
    context = {
        'form': form,
        'documento': documento,
        'title': f'Editar Documento: {documento.titulo}',
        'action': 'Atualizar',
        'acao': acao,
    }
    
    return render(request, 'assejus/documento_form.html', context)


@login_required
def documento_delete(request, pk):
    """
    Excluir documento jur√≠dico
    Confirma√ß√£o obrigat√≥ria
    """
    documento = get_object_or_404(DocumentoJuridico, pk=pk)
    
    if request.method == 'POST':
        try:
            # Armazenar informa√ß√µes para mensagem
            titulo = documento.titulo
            processo_numero = documento.processo.numero_processo
            
            # Excluir arquivo f√≠sico se existir
            if documento.arquivo and documento.arquivo.name:
                try:
                    documento.arquivo.delete(save=False)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao excluir arquivo f√≠sico: {e}")
            
            # Excluir registro do banco
            documento.delete()
            
            messages.success(
                request, 
                f'Documento "{titulo}" do processo {processo_numero} foi exclu√≠do com sucesso!'
            )
            
            # Redirecionar baseado no contexto
            processo_id = request.POST.get('processo_id')
            if processo_id:
                return redirect('assejus:processo_detail', pk=processo_id)
            else:
                return redirect('assejus:documento_list')
                
        except Exception as e:
            messages.error(request, f'Erro ao excluir documento: {str(e)}')
            print(f"‚ùå Erro ao excluir documento: {e}")
    
    context = {
        'documento': documento,
        'title': f'Excluir Documento: {documento.titulo}',
    }
    
    return render(request, 'assejus/documento_confirm_delete.html', context)


@login_required
def documento_download(request, pk):
    """
    Download de documento jur√≠dico
    Com controle de acesso e logging
    """
    documento = get_object_or_404(DocumentoJuridico, pk=pk)
    
    # Verificar se arquivo existe
    if not documento.arquivo or not documento.arquivo.name:
        messages.error(request, 'Arquivo n√£o encontrado.')
        return redirect('assejus:documento_detail', pk=pk)
    
    try:
        # Log do download (opcional)
        print(f"üì• Download: {request.user.username} baixou {documento.titulo}")
        
        # Preparar resposta de download
        response = HttpResponse(
            documento.arquivo.read(),
            content_type='application/octet-stream'
        )
        response['Content-Disposition'] = f'attachment; filename="{documento.arquivo.name}"'
        response['Content-Length'] = documento.arquivo.size
        
        return response
        
    except Exception as e:
        messages.error(request, f'Erro ao fazer download: {str(e)}')
        print(f"‚ùå Erro no download: {e}")
        return redirect('assejus:documento_detail', pk=pk)


@login_required
def documento_view(request, pk):
    """
    Visualizar documento no navegador
    Para PDFs e imagens
    """
    documento = get_object_or_404(DocumentoJuridico, pk=pk)
    
    if not documento.arquivo or not documento.arquivo.name:
        messages.error(request, 'Arquivo n√£o encontrado.')
        return redirect('assejus:documento_detail', pk=pk)
    
    # Verificar se √© um tipo que pode ser visualizado no navegador
    nome_arquivo = documento.arquivo.name.lower()
    tipos_visualizaveis = ['.pdf', '.jpg', '.jpeg', '.png', '.gif']
    
    if not any(nome_arquivo.endswith(ext) for ext in tipos_visualizaveis):
        messages.info(request, 'Este tipo de arquivo n√£o pode ser visualizado no navegador.')
        return redirect('assejus:documento_download', pk=pk)
    
    try:
        # Preparar resposta para visualiza√ß√£o
        response = HttpResponse(
            documento.arquivo.read(),
            content_type='application/pdf' if nome_arquivo.endswith('.pdf') else 'image/jpeg'
        )
        response['Content-Disposition'] = f'inline; filename="{documento.arquivo.name}"'
        
        return response
        
    except Exception as e:
        messages.error(request, f'Erro ao visualizar arquivo: {str(e)}')
        print(f"‚ùå Erro na visualiza√ß√£o: {e}")
        return redirect('assejus:documento_detail', pk=pk)


# =============================================================================
# VIEWS AJAX PARA DOCUMENTOS
# =============================================================================

@login_required
def documento_upload_ajax(request):
    """
    Upload de documento via AJAX
    Retorna JSON com resultado
    """
    from core.forms import DocumentoProcessoForm
    from django.http import JsonResponse
    
    print(f"=== DEBUG: documento_upload_ajax chamada ===")
    print(f"DEBUG: M√©todo: {request.method}")
    print(f"DEBUG: User: {request.user}")
    print(f"DEBUG: POST data: {request.POST}")
    print(f"DEBUG: FILES: {request.FILES}")
    
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    try:
        processo_id = request.POST.get('processo_id')
        print(f"DEBUG: Processo ID: {processo_id}")
        
        form = DocumentoProcessoForm(
            request.POST,
            request.FILES,
            processo_id=processo_id,
            usuario=request.user
        )
        
        print(f"DEBUG: Form is_valid: {form.is_valid()}")
        if not form.is_valid():
            print(f"DEBUG: Form errors: {form.errors}")
        
        if form.is_valid():
            documento = form.save()
            print(f"DEBUG: Documento salvo com ID: {documento.id}")
            print(f"DEBUG: Documento titulo: {documento.titulo}")
            print(f"DEBUG: Documento tipo: {documento.tipo_documento}")
            print(f"DEBUG: Documento tipo display: {documento.get_tipo_documento_display()}")
            print(f"DEBUG: Documento data_upload: {documento.data_upload}")
            print(f"DEBUG: Documento tamanho: {documento.tamanho_arquivo}")
            
            try:
                url_download = reverse('assejus:documento_download', args=[documento.id])
                url_view = reverse('assejus:documento_view', args=[documento.id])
                print(f"DEBUG: URL download: {url_download}")
                print(f"DEBUG: URL view: {url_view}")
            except Exception as e:
                print(f"DEBUG: Erro ao gerar URLs: {e}")
                url_download = f"/assejus/documentos/{documento.id}/download/"
                url_view = f"/assejus/documentos/{documento.id}/visualizar/"
            
            response_data = {
                'success': True,
                'message': 'Documento criado com sucesso!',
                'reload': True,  # Flag para recarregar a p√°gina
                'documento': {
                    'id': documento.id,
                    'titulo': documento.titulo,
                    'tipo': documento.get_tipo_documento_display(),
                    'data_upload': documento.data_upload.strftime('%d/%m/%Y %H:%M'),
                    'tamanho': documento.tamanho_arquivo,
                    'url_download': url_download,
                    'url_view': url_view,
                }
            }
            print(f"DEBUG: Retornando resposta: {response_data}")
            return JsonResponse(response_data)
        else:
            # Retornar erros de valida√ß√£o
            errors = {}
            for field, field_errors in form.errors.items():
                errors[field] = [str(error) for error in field_errors]
            
            return JsonResponse({
                'success': False,
                'message': 'Erro de valida√ß√£o',
                'errors': errors
            })
            
    except Exception as e:
        print(f"‚ùå Erro no upload AJAX: {e}")
        import traceback
        traceback.print_exc()
        
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })


@login_required
def documento_upload_multiplo_ajax(request):
    """
    Upload m√∫ltiplo de documentos via AJAX
    Retorna JSON com resultado
    """
    from core.forms import DocumentoProcessoMultiploForm
    from django.http import JsonResponse
    
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    try:
        processo_id = request.POST.get('processo_id')
        arquivos = request.FILES.getlist('arquivo_multiplo')
        
        if not arquivos:
            return JsonResponse({
                'success': False,
                'message': 'Nenhum arquivo foi selecionado.'
            })
        
        form = DocumentoProcessoMultiploForm(
            request.POST,
            processo_id=processo_id,
            usuario=request.user
        )
        
        if form.is_valid():
            documentos_criados = []
            tipo_documento = form.cleaned_data['tipo_documento']
            descricao = form.cleaned_data.get('descricao', '')
            
            for arquivo in arquivos:
                # Criar documento para cada arquivo
                from assejus.models import DocumentoJuridico
                
                # Gerar t√≠tulo baseado no nome do arquivo
                nome_base = arquivo.name.rsplit('.', 1)[0]
                titulo = nome_base.replace('_', ' ').replace('-', ' ').title()
                
                documento = DocumentoJuridico.objects.create(
                    titulo=titulo,
                    tipo_documento=tipo_documento,
                    descricao=descricao,
                    arquivo=arquivo,
                    processo_id=processo_id,
                    usuario_upload=request.user
                )
                
                documentos_criados.append(documento)
            
            return JsonResponse({
                'success': True,
                'message': f'{len(documentos_criados)} documentos criados com sucesso!',
                'documentos': [
                    {
                        'id': doc.id,
                        'titulo': doc.titulo,
                        'tipo': doc.get_tipo_documento_display(),
                        'data_upload': doc.data_upload.strftime('%d/%m/%Y %H:%M'),
                        'tamanho': doc.tamanho_arquivo,
                        'url_download': reverse('assejus:documento_download', args=[doc.id]),
                        'url_view': reverse('assejus:documento_view', args=[doc.id]),
                    }
                    for doc in documentos_criados
                ]
            })
        else:
            # Retornar erros de valida√ß√£o
            errors = {}
            for field, field_errors in form.errors.items():
                errors[field] = [str(error) for error in field_errors]
            
            return JsonResponse({
                'success': False,
                'message': 'Erro de valida√ß√£o',
                'errors': errors
            })
            
    except Exception as e:
        print(f"‚ùå Erro no upload m√∫ltiplo AJAX: {e}")
        import traceback
        traceback.print_exc()
        
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })


@login_required
def documento_list_ajax(request):
    """
    Lista de documentos via AJAX
    Para carregamento din√¢mico
    """
    from core.forms import DocumentoProcessoSearchForm
    from django.http import JsonResponse
    
    try:
        # Inicializar formul√°rio de busca
        search_form = DocumentoProcessoSearchForm(request.GET)
        
        # Query base
        documentos = DocumentoJuridico.objects.select_related(
            'processo', 'usuario_upload', 'processo__parte_cliente'
        ).all()
        
        # Aplicar filtros se formul√°rio for v√°lido
        if search_form.is_valid():
            search = search_form.cleaned_data.get('search', '').strip()
            tipo_documento = search_form.cleaned_data.get('tipo_documento')
            processo = search_form.cleaned_data.get('processo')
            data_inicio = search_form.cleaned_data.get('data_inicio')
            data_fim = search_form.cleaned_data.get('data_fim')
            usuario_upload = search_form.cleaned_data.get('usuario_upload')
            
            # Aplicar filtros (mesmo c√≥digo da view normal)
            if search:
                documentos = documentos.filter(
                    Q(titulo__icontains=search) |
                    Q(descricao__icontains=search) |
                    Q(processo__numero_processo__icontains=search) |
                    Q(processo__parte_cliente__nome__icontains=search)
                )
            
            if tipo_documento:
                documentos = documentos.filter(tipo_documento=tipo_documento)
            
            if processo:
                documentos = documentos.filter(processo=processo)
            
            if data_inicio:
                documentos = documentos.filter(data_upload__date__gte=data_inicio)
            
            if data_fim:
                documentos = documentos.filter(data_upload__date__lte=data_fim)
            
            if usuario_upload:
                documentos = documentos.filter(usuario_upload=usuario_upload)
        
        # Ordena√ß√£o e pagina√ß√£o
        documentos = documentos.order_by('-data_upload')
        
        # Pagina√ß√£o
        page = int(request.GET.get('page', 1))
        per_page = int(request.GET.get('per_page', 20))
        
        paginator = Paginator(documentos, per_page)
        page_obj = paginator.get_page(page)
        
        # Preparar dados para JSON
        documentos_data = []
        for documento in page_obj:
            documentos_data.append({
                'id': documento.id,
                'titulo': documento.titulo,
                'tipo': documento.get_tipo_documento_display(),
                'descricao': documento.descricao or '',
                'processo_numero': documento.processo.numero_processo,
                'processo_cliente': documento.processo.parte_cliente.nome,
                'data_upload': documento.data_upload.strftime('%d/%m/%Y %H:%M'),
                'usuario_upload': documento.usuario_upload.get_full_name() if documento.usuario_upload else 'Sistema',
                'tamanho': documento.tamanho_arquivo,
                'url_detail': reverse('assejus:documento_detail', args=[documento.id]),
                'url_download': reverse('assejus:documento_download', args=[documento.id]),
                'url_view': reverse('assejus:documento_view', args=[documento.id]),
                'url_edit': reverse('assejus:documento_update', args=[documento.id]),
                'url_delete': reverse('assejus:documento_delete', args=[documento.id]),
            })
        
        return JsonResponse({
            'success': True,
            'documentos': documentos_data,
            'pagination': {
                'current_page': page_obj.number,
                'total_pages': paginator.num_pages,
                'total_items': paginator.count,
                'has_next': page_obj.has_next(),
                'has_previous': page_obj.has_previous(),
                'next_page': page_obj.next_page_number() if page_obj.has_next() else None,
                'previous_page': page_obj.previous_page_number() if page_obj.has_previous() else None,
            }
        })
        
    except Exception as e:
        print(f"‚ùå Erro na listagem AJAX: {e}")
        import traceback
        traceback.print_exc()
        
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })


@login_required
def documento_delete_ajax(request, pk):
    """
    Excluir documento via AJAX
    """
    from django.http import JsonResponse
    
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    try:
        documento = get_object_or_404(DocumentoJuridico, pk=pk)
        
        # Armazenar informa√ß√µes para resposta
        titulo = documento.titulo
        processo_numero = documento.processo.numero_processo
        
        # Excluir arquivo f√≠sico se existir
        if documento.arquivo and documento.arquivo.name:
            try:
                documento.arquivo.delete(save=False)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao excluir arquivo f√≠sico: {e}")
        
        # Excluir registro do banco
        documento.delete()
        
        return JsonResponse({
            'success': True,
            'message': f'Documento "{titulo}" do processo {processo_numero} foi exclu√≠do com sucesso!'
        })
        
    except DocumentoJuridico.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'Documento n√£o encontrado'
        })
    except Exception as e:
        print(f"‚ùå Erro na exclus√£o AJAX: {e}")
        import traceback
        traceback.print_exc()
        
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })


@login_required
def documento_update_ajax(request, pk):
    """
    Atualizar documento via AJAX
    """
    from core.forms import DocumentoProcessoEditForm, DocumentoProcessoReplaceForm
    from django.http import JsonResponse
    
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    try:
        documento = get_object_or_404(DocumentoJuridico, pk=pk)
        acao = request.POST.get('acao', 'editar')
        
        if acao == 'substituir':
            form = DocumentoProcessoReplaceForm(request.POST, request.FILES, instance=documento)
        else:
            form = DocumentoProcessoEditForm(request.POST, instance=documento)
        
        if form.is_valid():
            form.save()
            
            return JsonResponse({
                'success': True,
                'message': 'Documento atualizado com sucesso!',
                'documento': {
                    'id': documento.id,
                    'titulo': documento.titulo,
                    'tipo': documento.get_tipo_documento_display(),
                    'descricao': documento.descricao or '',
                    'data_upload': documento.data_upload.strftime('%d/%m/%Y %H:%M'),
                    'tamanho': documento.tamanho_arquivo,
                    'url_download': reverse('assejus:documento_download', args=[documento.id]),
                    'url_view': reverse('assejus:documento_view', args=[documento.id]),
                }
            })
        else:
            # Retornar erros de valida√ß√£o
            errors = {}
            for field, field_errors in form.errors.items():
                errors[field] = [str(error) for error in field_errors]
            
            return JsonResponse({
                'success': False,
                'message': 'Erro de valida√ß√£o',
                'errors': errors
            })
            
    except DocumentoJuridico.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'Documento n√£o encontrado'
        })
    except Exception as e:
        print(f"‚ùå Erro na atualiza√ß√£o AJAX: {e}")
        import traceback
        traceback.print_exc()
        
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })


@login_required
def documento_delete(request, pk):
    """Excluir documento jur√≠dico"""
    documento = get_object_or_404(DocumentoJuridico, pk=pk)
    
    if request.method == 'POST':
        processo_id = documento.processo.id
        documento.delete()
        messages.success(request, 'Documento exclu√≠do com sucesso!')
        return redirect('assejus:processo_detail', pk=processo_id)
    
    context = {
        'documento': documento,
    }
    
    return render(request, 'assejus/documento_confirm_delete.html', context)


# Views para Andamentos
@login_required
def andamento_list(request):
    """Lista de andamentos"""
    search = request.GET.get('search', '')
    
    andamentos = Andamento.objects.all()
    
    if search:
        andamentos = andamentos.filter(
            Q(descricao_detalhada__icontains=search) |
            Q(processo__numero_processo__icontains=search) |
            Q(processo__parte_cliente__nome__icontains=search) |
            Q(tipo_andamento__icontains=search)
        )
    
    andamentos = andamentos.order_by('-data_andamento')
    
    # Pagina√ß√£o
    paginator = Paginator(andamentos, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
    }
    
    return render(request, 'assejus/andamento_list.html', context)


@login_required
def andamento_create(request):
    """Criar novo andamento"""
    print(f"üîç DEBUG: andamento_create chamada - m√©todo: {request.method}")
    print(f"üîç DEBUG: Par√¢metros GET: {request.GET}")
    
    if request.method == 'POST':
        print(f"üîç DEBUG: Processando POST")
        form = AndamentoForm(request.POST)
        if form.is_valid():
            print(f"üîç DEBUG: Formul√°rio v√°lido, salvando...")
            andamento = form.save(commit=False)
            andamento.usuario_registro = request.user
            andamento.save()
            form.save_m2m()
            print(f"üîç DEBUG: Andamento salvo com ID: {andamento.id}")
            messages.success(request, 'Andamento criado com sucesso!')
            # Redirecionar para a p√°gina do processo ao inv√©s da p√°gina do andamento
            return redirect('assejus:processo_detail', pk=andamento.processo.pk)
        else:
            print(f"üîç DEBUG: Formul√°rio inv√°lido: {form.errors}")
    else:
        # Verificar se h√° um processo espec√≠fico na URL
        processo_id = request.GET.get('processo')
        atendimento_id = request.GET.get('atendimento')
        initial_data = {}
        
        print(f"üîç DEBUG: Processo ID da URL: {processo_id}")
        print(f"üîç DEBUG: Atendimento ID da URL: {atendimento_id}")
        
        if processo_id:
            try:
                processo = ProcessoJuridico.objects.get(pk=processo_id)
                initial_data['processo'] = processo
                print(f"üîç DEBUG: Processo encontrado: {processo.numero_processo}")
            except ProcessoJuridico.DoesNotExist:
                print(f"üîç DEBUG: Processo n√£o encontrado para ID: {processo_id}")
                pass
        elif atendimento_id:
            try:
                atendimento = AtendimentoJuridico.objects.get(pk=atendimento_id)
                print(f"üîç DEBUG: Atendimento encontrado: {atendimento.titulo}")
                
                # Se o atendimento tem n√∫mero de processo, buscar ou criar o processo correspondente
                if atendimento.numero_processo:
                    try:
                        # Tentar encontrar um processo existente com o mesmo n√∫mero
                        processo = ProcessoJuridico.objects.get(numero_processo=atendimento.numero_processo)
                        print(f"üîç DEBUG: Processo existente encontrado: {processo.numero_processo}")
                    except ProcessoJuridico.DoesNotExist:
                        # Criar um novo processo baseado no atendimento
                        print(f"üîç DEBUG: Criando novo processo baseado no atendimento")
                        processo = ProcessoJuridico.objects.create(
                            numero_processo=atendimento.numero_processo,
                            vara_tribunal=atendimento.vara or 'N√£o informado',
                            tipo_acao='outro',  # Tipo padr√£o
                            parte_cliente=atendimento.associado,
                            parte_contraria='N√£o informado',
                            advogado_responsavel=atendimento.usuario_responsavel,
                            situacao_atual='andamento',
                            observacoes_gerais=f'Processo criado automaticamente a partir do atendimento: {atendimento.titulo}'
                        )
                        print(f"üîç DEBUG: Novo processo criado: {processo.numero_processo}")
                    
                    initial_data['processo'] = processo
                else:
                    print(f"üîç DEBUG: Atendimento n√£o possui n√∫mero de processo")
                    messages.warning(request, 'Este atendimento n√£o possui n√∫mero de processo. √â necess√°rio criar um processo judicial primeiro.')
                    
            except AtendimentoJuridico.DoesNotExist:
                print(f"üîç DEBUG: Atendimento n√£o encontrado para ID: {atendimento_id}")
                messages.error(request, 'Atendimento n√£o encontrado.')
                pass
        
        form = AndamentoForm(initial=initial_data)
    
    # Buscar processos para o contexto
    processos = ProcessoJuridico.objects.filter(
        situacao_atual__in=['andamento', 'suspenso']
    ).order_by('-data_cadastro')
    
    print(f"üîç DEBUG: Total de processos encontrados: {processos.count()}")
    
    context = {
        'form': form,
        'processos': processos,
        'title': 'Novo Andamento',
        'action': 'Criar',
    }
    
    print(f"üîç DEBUG: Renderizando template com contexto")
    return render(request, 'assejus/andamento_form.html', context)


@login_required
def andamento_detail(request, pk):
    """Detalhes do andamento"""
    andamento = get_object_or_404(Andamento, pk=pk)
    
    # Verificar se o advogado tem permiss√£o para ver este andamento
    if request.user.tipo_usuario == 'advogado' and andamento.processo.advogado_responsavel != request.user:
        from django.http import Http404
        raise Http404("Andamento n√£o encontrado ou voc√™ n√£o tem permiss√£o para visualiz√°-lo.")
    
    context = {
        'andamento': andamento,
    }
    
    return render(request, 'assejus/andamento_detail.html', context)


@login_required
def andamento_update(request, pk):
    """Editar andamento"""
    andamento = get_object_or_404(Andamento, pk=pk)
    
    # Verificar se o advogado tem permiss√£o para editar este andamento
    if request.user.tipo_usuario == 'advogado' and andamento.processo.advogado_responsavel != request.user:
        from django.http import Http404
        raise Http404("Andamento n√£o encontrado ou voc√™ n√£o tem permiss√£o para edit√°-lo.")
    
    if request.method == 'POST':
        form = AndamentoForm(request.POST, instance=andamento)
        if form.is_valid():
            form.save()
            messages.success(request, 'Andamento atualizado com sucesso!')
            return redirect('assejus:andamento_detail', pk=andamento.pk)
    else:
        form = AndamentoForm(instance=andamento)
    
    context = {
        'form': form,
        'andamento': andamento,
        'title': 'Editar Andamento',
        'action': 'Atualizar',
    }
    
    return render(request, 'assejus/andamento_form.html', context)


@login_required
def andamento_delete(request, pk):
    """Excluir andamento"""
    andamento = get_object_or_404(Andamento, pk=pk)
    
    # Verificar se o advogado tem permiss√£o para excluir este andamento
    if request.user.tipo_usuario == 'advogado' and andamento.processo.advogado_responsavel != request.user:
        from django.http import Http404
        raise Http404("Andamento n√£o encontrado ou voc√™ n√£o tem permiss√£o para exclu√≠-lo.")
    
    if request.method == 'POST':
        andamento.delete()
        messages.success(request, 'Andamento exclu√≠do com sucesso!')
        return redirect('assejus:andamento_list')
    
    context = {
        'andamento': andamento,
    }
    
    return render(request, 'assejus/andamento_confirm_delete.html', context)


@login_required
def andamento_delete_ajax(request, pk):
    """
    Excluir andamento via AJAX
    """
    from django.http import JsonResponse
    
    if request.method != 'POST':
        return JsonResponse({
            'success': False,
            'message': 'M√©todo n√£o permitido'
        })
    
    try:
        andamento = get_object_or_404(Andamento, pk=pk)
        
        # Verificar se o advogado tem permiss√£o para excluir este andamento
        if request.user.tipo_usuario == 'advogado' and andamento.processo.advogado_responsavel != request.user:
            return JsonResponse({
                'success': False,
                'message': 'Voc√™ n√£o tem permiss√£o para excluir este andamento.'
            })
        
        # Armazenar informa√ß√µes para resposta
        tipo_andamento = andamento.get_tipo_andamento_display()
        processo_numero = andamento.processo.numero_processo
        data_andamento = andamento.data_andamento.strftime('%d/%m/%Y %H:%M')
        
        # Excluir andamento
        andamento.delete()
        
        return JsonResponse({
            'success': True,
            'message': f'Andamento "{tipo_andamento}" do processo {processo_numero} foi exclu√≠do com sucesso!',
            'andamento_info': {
                'tipo': tipo_andamento,
                'processo': processo_numero,
                'data': data_andamento
            }
        })
        
    except Andamento.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'Andamento n√£o encontrado'
        })
    except Exception as e:
        print(f"‚ùå Erro na exclus√£o AJAX de andamento: {e}")
        import traceback
        traceback.print_exc()
        
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })


@login_required
def andamento_pdf(request, pk):
    """
    Gerar PDF do andamento
    """
    andamento = get_object_or_404(Andamento, pk=pk)
    
    # Verificar se o usu√°rio tem permiss√£o para visualizar este andamento
    if request.user.tipo_usuario == 'advogado' and andamento.processo.advogado_responsavel != request.user:
        from django.http import Http404
        raise Http404("Andamento n√£o encontrado ou voc√™ n√£o tem permiss√£o para visualiz√°-lo.")
    
    # Criar PDF
    response = HttpResponse(content_type='application/pdf')
    
    # Nome do arquivo
    filename = f"andamento_{andamento.processo.numero_processo}_{andamento.id}_{andamento.data_andamento.strftime('%Y%m%d')}.pdf"
    
    # Verificar se √© para download ou visualiza√ß√£o
    if request.GET.get('download') == '1':
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
    else:
        response['Content-Disposition'] = f'inline; filename="{filename}"'
    
    # Criar documento PDF
    doc = SimpleDocTemplate(response, pagesize=A4)
    story = []
    
    # Estilos
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=TA_CENTER
    )
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=20,
        alignment=TA_LEFT
    )
    normal_style = styles['Normal']
    bold_style = ParagraphStyle(
        'BoldStyle',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=6,
        alignment=TA_LEFT
    )
    
    # T√≠tulo
    story.append(Paragraph(f"Andamento - {andamento.get_tipo_andamento_display()}", title_style))
    story.append(Spacer(1, 20))
    
    # Informa√ß√µes do processo
    story.append(Paragraph("Informa√ß√µes do Processo", heading_style))
    story.append(Paragraph(f"<b>N√∫mero do Processo:</b> {andamento.processo.numero_processo}", normal_style))
    story.append(Paragraph(f"<b>Vara/Tribunal:</b> {andamento.processo.vara_tribunal}", normal_style))
    story.append(Paragraph(f"<b>Tipo de A√ß√£o:</b> {andamento.processo.get_tipo_acao_display()}", normal_style))
    story.append(Paragraph(f"<b>Parte Cliente:</b> {andamento.processo.parte_cliente.nome}", normal_style))
    story.append(Paragraph(f"<b>Parte Contr√°ria:</b> {andamento.processo.parte_contraria}", normal_style))
    story.append(Spacer(1, 20))
    
    # Informa√ß√µes do andamento
    story.append(Paragraph("Detalhes do Andamento", heading_style))
    story.append(Paragraph(f"<b>Tipo:</b> {andamento.get_tipo_andamento_display()}", normal_style))
    story.append(Paragraph(f"<b>Data:</b> {andamento.data_andamento.strftime('%d/%m/%Y √†s %H:%M')}", normal_style))
    story.append(Paragraph(f"<b>Registrado por:</b> {andamento.usuario_registro.get_full_name() or andamento.usuario_registro.username}", normal_style))
    story.append(Spacer(1, 20))
    
    # Descri√ß√£o detalhada
    if andamento.descricao_detalhada:
        story.append(Paragraph("Descri√ß√£o Detalhada", heading_style))
        # Quebrar texto longo em par√°grafos
        descricao_paragrafos = andamento.descricao_detalhada.split('\n')
        for paragrafo in descricao_paragrafos:
            if paragrafo.strip():
                story.append(Paragraph(paragrafo.strip(), normal_style))
        story.append(Spacer(1, 20))
    
    # Observa√ß√µes para o cliente
    if andamento.observacoes_cliente:
        story.append(Paragraph("Observa√ß√µes para o Cliente", heading_style))
        story.append(Paragraph(andamento.observacoes_cliente, normal_style))
        story.append(Spacer(1, 20))
    
    # Informa√ß√µes adicionais
    story.append(Paragraph("Informa√ß√µes Adicionais", heading_style))
    story.append(Paragraph(f"<b>Data de Cria√ß√£o:</b> {andamento.data_andamento.strftime('%d/%m/%Y √†s %H:%M')}", normal_style))
    story.append(Paragraph(f"<b>√öltima Atualiza√ß√£o:</b> {andamento.data_andamento.strftime('%d/%m/%Y √†s %H:%M')}", normal_style))
    story.append(Spacer(1, 20))
    
    # Rodap√©
    story.append(Paragraph(f"Documento gerado em {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}", 
                          ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER)))
    
    # Construir PDF
    doc.build(story)
    
    return response


@login_required
def processo_andamentos_pdf(request, pk):
    """
    Gerar PDF com todos os andamentos do processo
    """
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    from reportlab.platypus import Table, TableStyle, Spacer, Paragraph, SimpleDocTemplate
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
    from reportlab.lib.pagesizes import A4
    from reportlab.graphics.shapes import Drawing, Rect, Line
    from reportlab.graphics import renderPDF
    
    processo = get_object_or_404(ProcessoJuridico, pk=pk)
    
    # Verificar se o usu√°rio tem permiss√£o para visualizar este processo
    if request.user.tipo_usuario == 'advogado' and processo.advogado_responsavel != request.user:
        from django.http import Http404
        raise Http404("Processo n√£o encontrado ou voc√™ n√£o tem permiss√£o para visualiz√°-lo.")
    
    # Buscar todos os andamentos do processo ordenados por data
    andamentos = processo.andamentos.all().order_by('data_andamento')
    
    # Criar PDF
    response = HttpResponse(content_type='application/pdf')
    
    # Nome do arquivo
    filename = f"andamentos_processo_{processo.numero_processo}_{timezone.now().strftime('%Y%m%d')}.pdf"
    
    # Verificar se √© para download ou visualiza√ß√£o
    if request.GET.get('download') == '1':
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
    else:
        response['Content-Disposition'] = f'inline; filename="{filename}"'
    
    # Criar documento PDF com margens m√≠nimas no topo para logo
    doc = SimpleDocTemplate(response, pagesize=A4, 
                           rightMargin=72, leftMargin=72, 
                           topMargin=18, bottomMargin=100)  # Aumentar margem inferior para rodap√©
    story = []
    
    # Definir cores institucionais
    cor_vermelho_sangue = colors.Color(0.8, 0.1, 0.1)  # Vermelho sangue
    cor_cinza_escuro = colors.Color(0.2, 0.2, 0.2)     # Cinza escuro
    cor_cinza_claro = colors.Color(0.9, 0.9, 0.9)      # Cinza claro
    
    # Estilos personalizados
    styles = getSampleStyleSheet()
    
    # Estilo do cabe√ßalho institucional
    header_style = ParagraphStyle(
        'HeaderStyle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=cor_vermelho_sangue,
        spaceAfter=6,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    # Estilo do subt√≠tulo do cabe√ßalho
    header_subtitle_style = ParagraphStyle(
        'HeaderSubtitleStyle',
        parent=styles['Normal'],
        fontSize=14,
        textColor=cor_cinza_escuro,
        spaceAfter=4,
        alignment=TA_CENTER,
        fontName='Helvetica'
    )
    
    # Estilo do t√≠tulo do documento
    title_style = ParagraphStyle(
        'DocumentTitle',
        parent=styles['Heading1'],
        fontSize=18,
        textColor=cor_cinza_escuro,
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    # Estilo dos cabe√ßalhos de se√ß√£o
    section_style = ParagraphStyle(
        'SectionHeader',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=cor_vermelho_sangue,
        spaceAfter=15,
        spaceBefore=20,
        alignment=TA_LEFT,
        fontName='Helvetica-Bold',
        borderWidth=0,
        borderColor=cor_vermelho_sangue,
        borderPadding=5
    )
    
    # Estilo dos subt√≠tulos
    subtitle_style = ParagraphStyle(
        'Subtitle',
        parent=styles['Heading3'],
        fontSize=12,
        textColor=cor_cinza_escuro,
        spaceAfter=10,
        spaceBefore=15,
        alignment=TA_LEFT,
        fontName='Helvetica-Bold'
    )
    
    # Estilo do texto normal
    normal_style = ParagraphStyle(
        'NormalText',
        parent=styles['Normal'],
        fontSize=10,
        textColor=cor_cinza_escuro,
        spaceAfter=6,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    # Estilo do rodap√©
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.grey,
        spaceAfter=0,
        alignment=TA_CENTER,
        fontName='Helvetica'
    )
    
    # IMAGEM LOGO2 ASEJUR
    try:
        from reportlab.platypus import Image
        import os
        from django.conf import settings
        
        # Usar a fun√ß√£o auxiliar para encontrar a logo
        logo_path = get_logo_path('logo2assejur.png')
        
        if logo_path:
            print(f"‚úÖ Logo encontrada em: {logo_path}")
            # Converter cm para inch (1 inch = 2.54 cm)
            width_cm = 8.61
            height_cm = 2.41
            width_inch = width_cm / 2.54
            height_inch = height_cm / 2.54
            logo = Image(logo_path, width=width_inch*inch, height=height_inch*inch)
            logo.hAlign = 'CENTER'
            story.append(logo)
            story.append(Spacer(1, 10))
        else:
            print("‚ùå Logo n√£o encontrada.")
            # Se a logo n√£o for encontrada, pula o cabe√ßalho
            story.append(Spacer(1, 30))
    except Exception as e:
        print(f"‚ùå Erro ao carregar logo: {e}")
        # Em caso de erro, pula o cabe√ßalho
        story.append(Spacer(1, 30))
    
    # T√≠tulo discreto dos dados do processo
    story.append(Paragraph("Dados do Processo", ParagraphStyle(
        'ProcessTitle',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.grey,
        spaceAfter=15,
        spaceBefore=0,
        alignment=TA_LEFT,
        fontName='Helvetica'
    )))
    
    # Dados do processo em uma √∫nica tabela
    processo_data = [
        ['N√∫mero do Processo:', processo.numero_processo],
        ['Vara/Tribunal:', processo.vara_tribunal],
        ['Tipo de A√ß√£o:', processo.get_tipo_acao_display()],
        ['Situa√ß√£o Atual:', processo.get_situacao_atual_display()],
        ['Parte Cliente:', processo.parte_cliente.nome],
        ['Parte Contr√°ria:', processo.parte_contraria],
        ['Advogado Respons√°vel:', processo.advogado_responsavel.get_full_name() if processo.advogado_responsavel else 'N√£o informado'],
        ['Total de Andamentos:', str(andamentos.count())],
        ['Primeiro Andamento:', andamentos.first().data_andamento.strftime('%d/%m/%Y') if andamentos.exists() else 'N/A'],
        ['√öltimo Andamento:', andamentos.last().data_andamento.strftime('%d/%m/%Y') if andamentos.exists() else 'N/A'],
    ]
    
    # Criar tabela √∫nica com dados do processo
    processo_table = Table(processo_data, colWidths=[2*inch, 4*inch])
    processo_table.setStyle(TableStyle([
        ('TEXTCOLOR', (0, 0), (-1, -1), cor_cinza_escuro),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('LEFTPADDING', (0, 0), (-1, -1), 8),
        ('RIGHTPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
    ]))
    
    story.append(processo_table)
    story.append(Spacer(1, 25))
    
    # Tabela de andamentos
    if andamentos.exists():
        # Cabe√ßalho da tabela de andamentos
        andamentos_header = ['#', 'Data', 'Tipo', 'Descri√ß√£o', 'Observa√ß√µes']
        
        # Dados dos andamentos
        andamentos_data = [andamentos_header]
        
        for i, andamento in enumerate(andamentos, 1):
            # Criar Paragraphs para permitir quebra de linha autom√°tica
            descricao_para = Paragraph(andamento.descricao_detalhada or "", normal_style) if andamento.descricao_detalhada else Paragraph("", normal_style)
            observacoes_para = Paragraph(andamento.observacoes_cliente or "", normal_style) if andamento.observacoes_cliente else Paragraph("", normal_style)
            
            andamentos_data.append([
                str(i),
                andamento.data_andamento.strftime('%d/%m/%Y'),
                andamento.get_tipo_andamento_display(),
                descricao_para,
                observacoes_para
            ])
        
        # Criar tabela de andamentos com larguras ajustadas para textos longos
        andamentos_table = Table(andamentos_data, colWidths=[0.3*inch, 0.7*inch, 0.8*inch, 2.5*inch, 2.7*inch])
        andamentos_table.setStyle(TableStyle([
            # Cabe√ßalho
            ('TEXTCOLOR', (0, 0), (-1, 0), cor_cinza_escuro),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, 0), 'MIDDLE'),
            
            # Dados
            ('TEXTCOLOR', (0, 1), (-1, -1), cor_cinza_escuro),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('ALIGN', (0, 1), (0, -1), 'CENTER'),  # Coluna #
            ('ALIGN', (1, 1), (1, -1), 'CENTER'),  # Coluna Data
            ('ALIGN', (2, 1), (-1, -1), 'LEFT'),   # Demais colunas
            ('VALIGN', (0, 1), (-1, -1), 'TOP'),   # Alinhamento vertical no topo
            
            # Bordas e espa√ßamento
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(andamentos_table)
    else:
        story.append(Paragraph("Nenhum andamento registrado para este processo.", normal_style))
    
    story.append(Spacer(1, 30))
    
    # Fun√ß√£o para criar rodap√©
    def create_footer(canvas, doc):
        canvas.saveState()
        
        # Texto do rodap√©
        footer_text = """
        Reconhecimento de Utilidade P√∫blica Estadual Lei n¬∫ 5.614 28/11/06 |
        Reconhecimento de Utilidade P√∫blica Municipal Lei n¬∫ 3.634 14/05/07 |
        Fone: 86 3085-1722 | E-mail: abmepi@gmail.com |
        Endere√ßo: Rua Coelho Rodrigues, 2242, Centro Sul, CEP: 64.000-080, Teresina ‚Äì PI
        """
        
        # Posicionar rodap√© na parte inferior da p√°gina
        canvas.setFont('Helvetica', 7)
        canvas.setFillColor(colors.black)  # Texto preto
        
        # Desenhar linha separadora por toda a p√°gina
        canvas.setStrokeColor(colors.grey)
        canvas.setLineWidth(0.5)
        canvas.line(0, 70, 612, 70)  # Linha horizontal por toda a p√°gina (A4 width = 612pt)
        
        # Adicionar logo da ABMEPI do lado esquerdo
        try:
            logo_path = get_logo_path('Logo_abmepi.png')
            if logo_path:
                canvas.drawImage(logo_path, 20, 20, width=40, height=40, preserveAspectRatio=True)
                
                # Adicionar dados de gera√ß√£o do documento abaixo da logo
                canvas.setFont('Helvetica', 6)
                canvas.setFillColor(colors.lightgrey)  # Cor cinza claro
                canvas.drawString(20, 10, f"Documento gerado em {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}")
                canvas.drawString(20, 4, "ASEJUR - ABMEPI")
        except:
            pass  # Se n√£o conseguir carregar a logo, continua sem ela
        
        # Dividir o texto em linhas
        lines = footer_text.strip().split('|')
        y_position = 50  # Subiu de 30 para 50
        
        # Garantir que o texto das informa√ß√µes institucionais seja preto
        canvas.setFont('Helvetica', 7)
        canvas.setFillColor(colors.black)  # Texto preto
        
        for line in lines:
            line = line.strip()
            if line:
                # Todas as linhas alinhadas √† direita
                canvas.drawRightString(580, y_position, line)
                y_position -= 10
        
        canvas.restoreState()
    
    # Construir PDF com rodap√© em todas as p√°ginas
    doc.build(story, onFirstPage=create_footer, onLaterPages=create_footer)
    
    return response


# Views para Consultas
@login_required
def consulta_list(request):
    """Lista de consultas jur√≠dicas"""
    search = request.GET.get('search', '')
    status = request.GET.get('status', '')
    tipo = request.GET.get('tipo', '')
    
    consultas = ConsultaJuridica.objects.all()
    
    if search:
        consultas = consultas.filter(
            Q(pergunta__icontains=search) |
            Q(associado__nome__icontains=search) |
            Q(resposta__icontains=search)
        )
    
    if status:
        consultas = consultas.filter(status=status)
    
    if tipo:
        consultas = consultas.filter(tipo=tipo)
    
    # Ordena√ß√£o: primeiro por status (respondidas por √∫ltimo), depois por data de consulta
    consultas = consultas.order_by(
        Case(
            When(status='respondida', then=Value(1)),
            default=Value(0),
            output_field=IntegerField(),
        ),
        '-data_consulta'
    )
    
    # Estat√≠sticas para o contexto
    total_consultas = consultas.count()
    consultas_pendentes = consultas.exclude(status='respondida').count()
    consultas_respondidas = consultas.filter(status='respondida').count()
    
    # Verifica se h√° transi√ß√£o entre pendentes e respondidas
    tem_transicao = consultas_pendentes > 0 and consultas_respondidas > 0
    
    # Pagina√ß√£o
    paginator = Paginator(consultas, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'status': status,
        'tipo': tipo,
        'total_consultas': total_consultas,
        'consultas_pendentes': consultas_pendentes,
        'consultas_respondidas': consultas_respondidas,
        'tem_transicao': tem_transicao,
    }
    
    return render(request, 'assejus/consulta_list.html', context)


@login_required
def consulta_create(request):
    """Criar nova consulta jur√≠dica"""
    if request.method == 'POST':
        form = ConsultaJuridicaForm(request.POST)
        if form.is_valid():
            consulta = form.save()
            messages.success(request, 'Consulta criada com sucesso!')
            return redirect('assejus:consulta_detail', pk=consulta.pk)
    else:
        form = ConsultaJuridicaForm()
    
    context = {
        'form': form,
        'title': 'Nova Consulta Jur√≠dica',
        'action': 'Criar',
    }
    
    return render(request, 'assejus/consulta_form.html', context)


@login_required
def consulta_enviar_advogado(request, pk):
    """Enviar consulta para advogado"""
    consulta = get_object_or_404(ConsultaJuridica, pk=pk)
    
    if request.method == 'POST':
        advogado_id = request.POST.get('advogado_responsavel')
        if advogado_id:
            try:
                advogado = Advogado.objects.get(pk=advogado_id, ativo=True)
                consulta.advogado_responsavel = advogado
                consulta.status = 'em_analise'
                consulta.save()
                messages.success(request, f'Consulta enviada para o advogado {advogado.nome} com sucesso!')
            except Advogado.DoesNotExist:
                messages.error(request, 'Advogado n√£o encontrado ou inativo.')
        else:
            messages.error(request, 'Por favor, selecione um advogado.')
        
        return redirect('assejus:consulta_detail', pk=consulta.pk)
    
    # Busca advogados ativos
    advogados = Advogado.objects.filter(ativo=True).order_by('nome')
    
    context = {
        'consulta': consulta,
        'advogados': advogados,
        'title': 'Enviar Consulta para Advogado',
    }
    
    return render(request, 'assejus/consulta_enviar_advogado.html', context)


@login_required
def consulta_detail(request, pk):
    """Detalhes da consulta jur√≠dica"""
    consulta = get_object_or_404(ConsultaJuridica, pk=pk)
    
    context = {
        'consulta': consulta,
    }
    
    return render(request, 'assejus/consulta_detail.html', context)


@login_required
def consulta_update(request, pk):
    """Editar consulta jur√≠dica"""
    consulta = get_object_or_404(ConsultaJuridica, pk=pk)
    
    if request.method == 'POST':
        form = ConsultaJuridicaForm(request.POST, instance=consulta)
        if form.is_valid():
            consulta = form.save(commit=False)
            if form.cleaned_data.get('resposta'):
                consulta.status = 'respondida'
                consulta.resolvida = True
                consulta.data_resposta = timezone.now()
                consulta.usuario_resposta = request.user
            consulta.save()
            messages.success(request, 'Consulta atualizada com sucesso!')
            return redirect('assejus:consulta_detail', pk=consulta.pk)
    else:
        form = ConsultaJuridicaForm(instance=consulta)
    
    context = {
        'form': form,
        'consulta': consulta,
        'title': 'Editar Consulta Jur√≠dica',
        'action': 'Atualizar',
    }
    
    return render(request, 'assejus/consulta_form.html', context)


@login_required
def consulta_delete(request, pk):
    """Excluir consulta jur√≠dica"""
    consulta = get_object_or_404(ConsultaJuridica, pk=pk)
    
    if request.method == 'POST':
        consulta.delete()
        messages.success(request, 'Consulta exclu√≠da com sucesso!')
        return redirect('assejus:consulta_list')
    
    context = {
        'consulta': consulta,
    }
    
    return render(request, 'assejus/consulta_confirm_delete.html', context)


# Views para Relat√≥rios
@login_required
def relatorio_list(request):
    """Lista de relat√≥rios jur√≠dicos"""
    search = request.GET.get('search', '')
    tipo = request.GET.get('tipo', '')
    escopo = request.GET.get('escopo', '')
    
    relatorios = RelatorioJuridico.objects.all()
    
    if search:
        relatorios = relatorios.filter(
            Q(tipo__icontains=search) |
            Q(advogado__nome__icontains=search)
        )
    
    if tipo:
        relatorios = relatorios.filter(tipo=tipo)
    
    if escopo:
        relatorios = relatorios.filter(escopo=escopo)
    
    relatorios = relatorios.order_by('-data_geracao')
    
    # Pagina√ß√£o
    paginator = Paginator(relatorios, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search': search,
        'tipo': tipo,
        'escopo': escopo,
    }
    
    return render(request, 'assejus/relatorio_list.html', context)


@login_required
def relatorio_create(request):
    """Criar novo relat√≥rio jur√≠dico"""
    if request.method == 'POST':
        form = RelatorioJuridicoForm(request.POST)
        if form.is_valid():
            relatorio = form.save(commit=False)
            relatorio.usuario_geracao = request.user
            
            # Valida√ß√£o adicional para o escopo
            if relatorio.escopo == 'por_advogado' and not relatorio.advogado:
                form.add_error('advogado', '√â obrigat√≥rio selecionar um advogado quando o escopo for "Por Advogado Espec√≠fico".')
                context = {
                    'form': form,
                    'title': 'Novo Relat√≥rio Jur√≠dico',
                    'action': 'Criar',
                }
                return render(request, 'assejus/relatorio_form.html', context)
            
            relatorio.save()
            messages.success(request, 'Relat√≥rio criado com sucesso!')
            return redirect('assejus:relatorio_detail', pk=relatorio.pk)
    else:
        form = RelatorioJuridicoForm()
    
    context = {
        'form': form,
        'title': 'Novo Relat√≥rio Jur√≠dico',
        'action': 'Criar',
    }
    
    return render(request, 'assejus/relatorio_form.html', context)


@login_required
def relatorio_detail(request, pk):
    """Detalhes do relat√≥rio jur√≠dico"""
    relatorio = get_object_or_404(RelatorioJuridico, pk=pk)
    
    # Estat√≠sticas baseadas no escopo do relat√≥rio
    from django.db.models import Count, Q
    
    # Filtros por per√≠odo, distintos para cada modelo
    periodo_filter_atend = Q(
        data_abertura__gte=relatorio.periodo_inicio,
        data_abertura__lte=relatorio.periodo_fim
    )
    periodo_filter_cons = Q(
        data_consulta__gte=relatorio.periodo_inicio,
        data_consulta__lte=relatorio.periodo_fim
    )
    
    if relatorio.escopo == 'por_advogado' and relatorio.advogado:
        # Relat√≥rio por advogado espec√≠fico
        atendimentos = AtendimentoJuridico.objects.filter(
            periodo_filter_atend,
            advogado_responsavel=relatorio.advogado
        )
        consultas = ConsultaJuridica.objects.filter(
            periodo_filter_cons,
            advogado_responsavel=relatorio.advogado
        )
        escopo_info = f"Relat√≥rio espec√≠fico para o advogado {relatorio.advogado.nome}"
    else:
        # Relat√≥rio total geral
        atendimentos = AtendimentoJuridico.objects.filter(periodo_filter_atend)
        consultas = ConsultaJuridica.objects.filter(periodo_filter_cons)
        escopo_info = "Relat√≥rio geral de todos os advogados"
    
    # Estat√≠sticas
    total_atendimentos = atendimentos.count()
    atendimentos_por_status = atendimentos.values('status').annotate(total=Count('id'))
    atendimentos_por_tipo = atendimentos.values('tipo_demanda').annotate(total=Count('id'))
    
    total_consultas = consultas.count()
    consultas_por_status = consultas.values('status').annotate(total=Count('id'))
    
    context = {
        'relatorio': relatorio,
        'escopo_info': escopo_info,
        'total_atendimentos': total_atendimentos,
        'atendimentos_por_status': atendimentos_por_status,
        'atendimentos_por_tipo': atendimentos_por_tipo,
        'total_consultas': total_consultas,
        'consultas_por_status': consultas_por_status,
        'periodo_inicio': relatorio.periodo_inicio,
        'periodo_fim': relatorio.periodo_fim,
    }
    
    return render(request, 'assejus/relatorio_detail.html', context)


@login_required
def relatorio_update(request, pk):
    """Editar relat√≥rio jur√≠dico"""
    relatorio = get_object_or_404(RelatorioJuridico, pk=pk)
    
    if request.method == 'POST':
        form = RelatorioJuridicoForm(request.POST, instance=relatorio)
        if form.is_valid():
            relatorio_temp = form.save(commit=False)
            
            # Valida√ß√£o adicional para o escopo
            if relatorio_temp.escopo == 'por_advogado' and not relatorio_temp.advogado:
                form.add_error('advogado', '√â obrigat√≥rio selecionar um advogado quando o escopo for "Por Advogado Espec√≠fico".')
                context = {
                    'form': form,
                    'relatorio': relatorio,
                    'title': 'Editar Relat√≥rio Jur√≠dico',
                    'action': 'Atualizar',
                }
                return render(request, 'assejus/relatorio_form.html', context)
            
            form.save()
            messages.success(request, 'Relat√≥rio atualizado com sucesso!')
            return redirect('assejus:relatorio_detail', pk=relatorio.pk)
    else:
        form = RelatorioJuridicoForm(instance=relatorio)
    
    context = {
        'form': form,
        'relatorio': relatorio,
        'title': 'Editar Relat√≥rio Jur√≠dico',
        'action': 'Atualizar',
    }
    
    return render(request, 'assejus/relatorio_form.html', context)


@login_required
def relatorio_delete(request, pk):
    """Excluir relat√≥rio jur√≠dico"""
    relatorio = get_object_or_404(RelatorioJuridico, pk=pk)
    
    if request.method == 'POST':
        relatorio.delete()
        messages.success(request, 'Relat√≥rio exclu√≠do com sucesso!')
        return redirect('assejus:relatorio_list')
    
    context = {
        'relatorio': relatorio,
    }
    
    return render(request, 'assejus/relatorio_confirm_delete.html', context)


@login_required
def relatorio_pdf(request, pk):
    """Gerar relat√≥rio em PDF"""
    relatorio = get_object_or_404(RelatorioJuridico, pk=pk)
    
    # Estat√≠sticas baseadas no escopo do relat√≥rio
    from django.db.models import Count, Q
    
    # Filtros por per√≠odo, distintos para cada modelo
    periodo_filter_atend = Q(
        data_abertura__gte=relatorio.periodo_inicio,
        data_abertura__lte=relatorio.periodo_fim
    )
    periodo_filter_cons = Q(
        data_consulta__gte=relatorio.periodo_inicio,
        data_consulta__lte=relatorio.periodo_fim
    )
    
    if relatorio.escopo == 'por_advogado' and relatorio.advogado:
        # Relat√≥rio por advogado espec√≠fico
        atendimentos = AtendimentoJuridico.objects.filter(
            periodo_filter_atend,
            advogado_responsavel=relatorio.advogado
        )
        consultas = ConsultaJuridica.objects.filter(
            periodo_filter_cons,
            advogado_responsavel=relatorio.advogado
        )
        escopo_info = f"Relat√≥rio espec√≠fico para o advogado {relatorio.advogado.nome}"
    else:
        # Relat√≥rio total geral
        atendimentos = AtendimentoJuridico.objects.filter(periodo_filter_atend)
        consultas = ConsultaJuridica.objects.filter(periodo_filter_cons)
        escopo_info = "Relat√≥rio geral de todos os advogados"
    
    # Estat√≠sticas
    total_atendimentos = atendimentos.count()
    atendimentos_por_status = atendimentos.values('status').annotate(total=Count('id'))
    atendimentos_por_tipo = atendimentos.values('tipo_demanda').annotate(total=Count('id'))
    
    total_consultas = consultas.count()
    consultas_por_status = consultas.values('status').annotate(total=Count('id'))
    
    # Criar PDF
    response = HttpResponse(content_type='application/pdf')
    
    # Nome do arquivo baseado no escopo
    if relatorio.escopo == 'por_advogado' and relatorio.advogado:
        filename = f"relatorio_{relatorio.tipo}_{relatorio.advogado.nome}_{relatorio.periodo_inicio}_{relatorio.periodo_fim}.pdf"
    else:
        filename = f"relatorio_{relatorio.tipo}_{relatorio.periodo_inicio}_{relatorio.periodo_fim}.pdf"
    
    # Verificar se √© para download ou visualiza√ß√£o
    if request.GET.get('download') == '1':
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
    else:
        response['Content-Disposition'] = f'inline; filename="{filename}"'
    
    # Criar documento PDF
    doc = SimpleDocTemplate(response, pagesize=A4)
    story = []
    
    # Estilos
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=TA_CENTER
    )
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=20,
        alignment=TA_LEFT
    )
    normal_style = styles['Normal']
    
    # T√≠tulo
    if relatorio.escopo == 'por_advogado' and relatorio.advogado:
        story.append(Paragraph(f"Relat√≥rio {relatorio.get_tipo_display()} - {relatorio.advogado.nome}", title_style))
    else:
        story.append(Paragraph(f"Relat√≥rio {relatorio.get_tipo_display()}", title_style))
    story.append(Spacer(1, 20))
    
    # Informa√ß√µes do relat√≥rio
    story.append(Paragraph("Informa√ß√µes do Relat√≥rio", heading_style))
    story.append(Paragraph(f"<b>Escopo:</b> {escopo_info}", normal_style))
    story.append(Paragraph(f"<b>Per√≠odo:</b> {relatorio.periodo_inicio.strftime('%d/%m/%Y')} a {relatorio.periodo_fim.strftime('%d/%m/%Y')}", normal_style))
    story.append(Paragraph(f"<b>Data de Gera√ß√£o:</b> {relatorio.data_geracao.strftime('%d/%m/%Y %H:%M')}", normal_style))
    story.append(Paragraph(f"<b>Usu√°rio:</b> {relatorio.usuario_geracao.username if relatorio.usuario_geracao else 'N√£o informado'}", normal_style))
    story.append(Spacer(1, 20))
    
    # Estat√≠sticas de Atendimentos
    story.append(Paragraph("Estat√≠sticas de Atendimentos", heading_style))
    story.append(Paragraph(f"<b>Total de Atendimentos:</b> {total_atendimentos}", normal_style))
    
    if atendimentos_por_status:
        story.append(Paragraph("Atendimentos por Status:", normal_style))
        status_data = [['Status', 'Quantidade']]
        for item in atendimentos_por_status:
            status_data.append([item['status'], str(item['total'])])
        
        status_table = Table(status_data)
        status_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(status_table)
    
    story.append(Spacer(1, 20))
    
    # Estat√≠sticas de Consultas
    story.append(Paragraph("Estat√≠sticas de Consultas", heading_style))
    story.append(Paragraph(f"<b>Total de Consultas:</b> {total_consultas}", normal_style))
    
    if consultas_por_status:
        story.append(Paragraph("Consultas por Status:", normal_style))
        consulta_data = [['Status', 'Quantidade']]
        for item in consultas_por_status:
            consulta_data.append([item['status'], str(item['total'])])
        
        consulta_table = Table(consulta_data)
        consulta_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(consulta_table)
    
    # Gerar PDF
    doc.build(story)
    return response


@login_required
def stats(request):
    """API para retornar estat√≠sticas em formato JSON"""
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        # Estat√≠sticas b√°sicas
        total_advogados = Advogado.objects.filter(ativo=True).count()
        total_atendimentos = AtendimentoJuridico.objects.count()
        atendimentos_em_andamento = AtendimentoJuridico.objects.filter(status='em_andamento').count()
        consultas_pendentes = ConsultaJuridica.objects.exclude(status='respondida').count()
        
        data = {
            'total_advogados': total_advogados,
            'total_atendimentos': total_atendimentos,
            'atendimentos_em_andamento': atendimentos_em_andamento,
            'consultas_pendentes': consultas_pendentes,
        }
        
        return JsonResponse(data)
    
    # Se n√£o for uma requisi√ß√£o AJAX, retornar erro 400
    return JsonResponse({'error': 'Requisi√ß√£o inv√°lida'}, status=400)


# ============================================================================
# VIEWS PARA MODAIS
# ============================================================================

from django.template.loader import render_to_string

# Views de teste removidas - n√£o s√£o mais necess√°rias
# def advogado_modal_test(request): ...
# def advogado_modal_create_simple(request): ...
# def advogado_modal_create_minimal(request): ...

def advogado_modal_create(request):
    """View para criar advogado via modal"""
    print(f"=== DEBUG: advogado_modal_create chamada ===")
    print(f"DEBUG: M√©todo da requisi√ß√£o: {request.method}")
    print(f"DEBUG: Host: {request.get_host()}")
    print(f"DEBUG: User: {request.user}")
    print(f"DEBUG: URL: {request.path}")
    print(f"DEBUG: Headers: {dict(request.headers)}")
    print(f"DEBUG: Content-Type: {request.content_type}")
    print(f"DEBUG: Accept: {request.headers.get('accept')}")
    print(f"DEBUG: X-Requested-With: {request.headers.get('x-requested-with')}")
    
    # Verifica√ß√£o manual de autentica√ß√£o
    if not request.user.is_authenticated:
        print("‚ùå Usu√°rio n√£o autenticado")
        return JsonResponse({
            'success': False,
            'message': 'Usu√°rio n√£o autenticado',
            'redirect': '/login/'
        }, status=401)
    
    if request.method == 'POST':
        print(f"DEBUG: Dados POST recebidos: {request.POST}")
        print(f"DEBUG: FILES: {request.FILES}")
        form = AdvogadoForm(request.POST, request.FILES)
        if form.is_valid():
            advogado = form.save()
            print(f"DEBUG: Advogado salvo com sucesso: {advogado.id}")
            
            # Verificar se o usu√°rio foi criado automaticamente
            if advogado.user:
                # Retornar informa√ß√µes de login
                return JsonResponse({
                    'success': True,
                    'message': f'Advogado {advogado.nome} criado com sucesso!',
                    'reload': True,
                    'id': advogado.id,
                    'login_info': {
                        'username': advogado.user.username,
                        'senha_padrao': '12345678',
                        'tipo_usuario': advogado.user.tipo_usuario
                    }
                })
            else:
                # Usu√°rio n√£o foi criado automaticamente
                return JsonResponse({
                    'success': True,
                    'message': f'Advogado {advogado.nome} criado com sucesso! (Usu√°rio n√£o criado automaticamente)',
                    'reload': True,
                    'id': advogado.id
                })
        else:
            print(f"DEBUG: Erros de valida√ß√£o: {form.errors}")
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    print("DEBUG: Renderizando formul√°rio GET")
    form = AdvogadoForm()
    
    # Usar render_to_string para obter o HTML como string
    form_html = render_to_string('assejus/forms/advogado_form_modal.html', {
        'form': form,
        'title': 'Novo Advogado'
    }, request=request)
    
    print(f"DEBUG: Form HTML gerado com {len(form_html)} caracteres")
    print(f"DEBUG: Retornando JsonResponse com form_html")
    return JsonResponse({
        'success': True,
        'form_html': form_html
    })


@login_required
def advogado_modal_update(request, pk):
    """View para editar advogado via modal"""
    print(f"DEBUG: advogado_modal_update chamada para PK: {pk}")
    advogado = get_object_or_404(Advogado, pk=pk)
    print(f"DEBUG: Advogado encontrado: {advogado.nome}")
    
    if request.method == 'POST':
        print(f"DEBUG: M√©todo POST recebido")
        form = AdvogadoForm(request.POST, request.FILES, instance=advogado)
        if form.is_valid():
            advogado = form.save()
            print(f"DEBUG: Formul√°rio v√°lido, advogado salvo")
            return JsonResponse({
                'success': True,
                'message': f'Advogado {advogado.nome} atualizado com sucesso!',
                'reload': True,
                'id': advogado.id
            })
        else:
            print(f"DEBUG: Formul√°rio inv√°lido: {form.errors}")
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    print(f"DEBUG: M√©todo GET, renderizando formul√°rio")
    form = AdvogadoForm(instance=advogado)
    
    # Usar render_to_string para obter o HTML como string
    form_html = render_to_string('assejus/forms/advogado_form_modal.html', {
        'form': form,
        'title': 'Editar Advogado'
    }, request=request)
    
    print(f"DEBUG: Form HTML renderizado com sucesso, tamanho: {len(form_html)}")
    return JsonResponse({
        'success': True,
        'form_html': form_html
    })


@login_required
def atendimento_modal_create(request):
    """View para criar atendimento via modal"""
    if request.method == 'POST':
        form = AtendimentoJuridicoForm(request.POST)
        if form.is_valid():
            atendimento = form.save()
            return JsonResponse({
                'success': True,
                'message': f'Atendimento {atendimento.titulo} criado com sucesso!',
                'reload': True,
                'id': atendimento.id,
                'titulo': atendimento.titulo
            })
        else:
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    form = AtendimentoJuridicoForm()
    
    # Usar render_to_string para obter o HTML como string
    form_html = render_to_string('assejus/forms/atendimento_form_modal.html', {
        'form': form,
        'title': 'Novo Atendimento'
    }, request=request)
    return JsonResponse({'form_html': form_html})


@login_required
def atendimento_modal_update(request, pk):
    """View para editar atendimento via modal"""
    atendimento = get_object_or_404(AtendimentoJuridico, pk=pk)
    
    if request.method == 'POST':
        form = AtendimentoJuridicoForm(request.POST, instance=atendimento)
        if form.is_valid():
            atendimento = form.save()
            return JsonResponse({
                'success': True,
                'message': f'Atendimento {atendimento.titulo} atualizado com sucesso!',
                'reload': True,
                'id': atendimento.id
            })
        else:
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    form = AtendimentoJuridicoForm(instance=atendimento)
    
    # Usar render_to_string para obter o HTML como string
    form_html = render_to_string('assejus/forms/atendimento_form_modal.html', {
        'form': form,
        'title': 'Editar Atendimento'
    }, request=request)
    return JsonResponse({'form_html': form_html})








# ===== VIEWS PARA GEST√ÉO DE PROCESSOS JUR√çDICOS =====

@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def processos_list(request):
    """Lista todos os processos jur√≠dicos"""
    # Filtro baseado no tipo de usu√°rio
    if request.user.tipo_usuario == 'advogado':
        # Advogados s√≥ veem processos onde s√£o respons√°veis
        processos = ProcessoJuridico.objects.filter(advogado_responsavel=request.user).order_by('-data_atualizacao')
    else:
        # Administradores e atendentes veem todos os processos
        processos = ProcessoJuridico.objects.all().order_by('-data_atualizacao')
    
    # Filtros
    search = request.GET.get('search')
    situacao = request.GET.get('situacao')
    tipo_acao = request.GET.get('tipo_acao')
    advogado = request.GET.get('advogado')
    
    if search:
        processos = processos.filter(
            Q(numero_processo__icontains=search) |
            Q(parte_cliente__nome__icontains=search) |
            Q(parte_contraria__icontains=search) |
            Q(vara_tribunal__icontains=search)
        )
    if situacao:
        processos = processos.filter(situacao_atual=situacao)
    if tipo_acao:
        processos = processos.filter(tipo_acao=tipo_acao)
    if advogado:
        processos = processos.filter(advogado_responsavel_id=advogado)
    
    # Estat√≠sticas para o dashboard (tamb√©m filtradas por permiss√£o)
    if request.user.tipo_usuario == 'advogado':
        base_queryset = ProcessoJuridico.objects.filter(advogado_responsavel=request.user)
    else:
        base_queryset = ProcessoJuridico.objects.all()
    
    stats = {
        'total_processos': base_queryset.count(),
        'processos_andamento': base_queryset.filter(situacao_atual='andamento').count(),
        'processos_suspensos': base_queryset.filter(situacao_atual='suspenso').count(),
        'processos_arquivados': base_queryset.filter(situacao_atual='arquivado').count(),
        'processos_concluidos': base_queryset.filter(situacao_atual='concluido').count(),
    }
    
    context = {
        'processos': processos,
        'stats': stats,
        'situacao_choices': ProcessoJuridico.SITUACAO_CHOICES,
        'tipo_acao_choices': ProcessoJuridico.TIPO_ACAO_CHOICES,
        'advogados': User.objects.filter(tipo_usuario='advogado').order_by('first_name'),
    }
    
    return render(request, 'assejus/processos_list.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def processo_detail(request, pk):
    """Detalhes de um processo espec√≠fico com timeline de andamentos"""
    processo = get_object_or_404(ProcessoJuridico, pk=pk)
    
    # Verificar se o advogado tem permiss√£o para ver este processo
    if request.user.tipo_usuario == 'advogado':
        # Verificar se o processo tem advogado respons√°vel
        if not processo.advogado_responsavel:
            from django.http import Http404
            raise Http404("Processo n√£o tem advogado respons√°vel definido. Contate um administrador.")
        
        # Verificar se o usu√°rio √© o advogado respons√°vel
        if processo.advogado_responsavel != request.user:
            from django.http import Http404
            raise Http404("Processo n√£o encontrado ou voc√™ n√£o tem permiss√£o para visualiz√°-lo.")
    andamentos = processo.andamentos.all().order_by('-data_andamento')
    documentos = processo.documentos.all().order_by('-data_upload')
    
    # Filtros para andamentos
    tipo_andamento = request.GET.get('tipo_andamento')
    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')
    
    if tipo_andamento:
        andamentos = andamentos.filter(tipo_andamento=tipo_andamento)
    if data_inicio:
        andamentos = andamentos.filter(data_andamento__date__gte=data_inicio)
    if data_fim:
        andamentos = andamentos.filter(data_andamento__date__lte=data_fim)
    
    context = {
        'processo': processo,
        'andamentos': andamentos,
        'documentos': documentos,
        'tipo_andamento_choices': Andamento.TIPO_ANDAMENTO_CHOICES,
    }
    
    return render(request, 'assejus/processo_detail.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def processo_create(request):
    """Criar novo processo jur√≠dico"""
    if request.method == 'POST':
        form = ProcessoJuridicoForm(request.POST)
        if form.is_valid():
            processo = form.save()
            messages.success(request, f'Processo {processo.numero_processo} criado com sucesso!')
            return redirect('assejus:processo_detail', pk=processo.pk)
    else:
        form = ProcessoJuridicoForm()
    
    return render(request, 'assejus/processo_form.html', {'form': form, 'title': 'Novo Processo'})


@login_required
def buscar_associados_ajax(request):
    """Buscar associados via AJAX para autocomplete"""
    from django.http import JsonResponse
    from associados.models import Associado
    
    query = request.GET.get('q', '')
    if len(query) < 2:
        return JsonResponse({'results': []})
    
    # Buscar associados que contenham o termo de busca
    associados = Associado.objects.filter(
        nome__icontains=query
    ).values('id', 'nome', 'cpf', 'matricula_militar')[:10]
    
    results = []
    for associado in associados:
        results.append({
            'id': associado['id'],
            'text': f"{associado['nome']} - CPF: {associado['cpf'] or 'N/A'} - Matr√≠cula: {associado['matricula_militar'] or 'N/A'}"
        })
    
    return JsonResponse({'results': results})


@login_required
def buscar_processos_ajax(request):
    """Buscar processos via AJAX para autocomplete"""
    from django.http import JsonResponse
    from .models import ProcessoJuridico
    
    query = request.GET.get('q', '')
    if len(query) < 2:
        return JsonResponse({'results': []})
    
    # Buscar processos que contenham o termo de busca
    processos = ProcessoJuridico.objects.filter(
        numero_processo__icontains=query
    ).values('id', 'numero_processo', 'tipo_processo', 'parte_cliente__nome')[:10]
    
    results = []
    for processo in processos:
        tipo = 'Judicial' if processo['tipo_processo'] == 'judicial' else 'Administrativo'
        results.append({
            'id': processo['id'],
            'text': f"{processo['numero_processo']} - {tipo} - Cliente: {processo['parte_cliente__nome'] or 'N/A'}"
        })
    
    return JsonResponse({'results': results})


# Views para Procura√ß√£o Ad Judicia
@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_list(request):
    """Lista todas as procura√ß√µes"""
    procuracaoes = ProcuracaoAdJudicia.objects.all().order_by('-data_criacao')
    
    context = {
        'procuracaoes': procuracaoes,
        'title': 'Procura√ß√µes Ad Judicia'
    }
    
    return render(request, 'assejus/procuracao_list.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_create(request):
    """Criar nova procura√ß√£o"""
    if request.method == 'POST':
        form = ProcuracaoAdJudiciaForm(request.POST)
        if form.is_valid():
            procuracao = form.save(commit=False)
            procuracao.usuario_criacao = request.user
            procuracao.save()
            form.save_m2m()  # Salvar relacionamentos many-to-many
            messages.success(request, 'Procura√ß√£o criada com sucesso!')
            return redirect('assejus:procuracao_detail', pk=procuracao.pk)
    else:
        form = ProcuracaoAdJudiciaForm()
    
    context = {
        'form': form,
        'title': 'Nova Procura√ß√£o Ad Judicia'
    }
    
    return render(request, 'assejus/procuracao_form.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_detail(request, pk):
    """Detalhes da procura√ß√£o"""
    procuracao = get_object_or_404(ProcuracaoAdJudicia, pk=pk)
    
    context = {
        'procuracao': procuracao,
        'title': f'Procura√ß√£o - {procuracao.outorgante.nome}'
    }
    
    return render(request, 'assejus/procuracao_detail.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_edit(request, pk):
    """Editar procura√ß√£o"""
    procuracao = get_object_or_404(ProcuracaoAdJudicia, pk=pk)
    
    if request.method == 'POST':
        form = ProcuracaoAdJudiciaForm(request.POST, instance=procuracao)
        if form.is_valid():
            form.save()
            messages.success(request, 'Procura√ß√£o atualizada com sucesso!')
            return redirect('assejus:procuracao_detail', pk=procuracao.pk)
    else:
        form = ProcuracaoAdJudiciaForm(instance=procuracao)
    
    context = {
        'form': form,
        'procuracao': procuracao,
        'title': f'Editar Procura√ß√£o - {procuracao.outorgante.nome}'
    }
    
    return render(request, 'assejus/procuracao_form.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_delete(request, pk):
    """Excluir procura√ß√£o"""
    procuracao = get_object_or_404(ProcuracaoAdJudicia, pk=pk)
    
    if request.method == 'POST':
        outorgante_nome = procuracao.outorgante.nome
        procuracao.delete()
        messages.success(request, f'Procura√ß√£o de {outorgante_nome} exclu√≠da com sucesso!')
        return redirect('assejus:procuracao_list')
    
    context = {
        'procuracao': procuracao,
        'title': f'Excluir Procura√ß√£o - {procuracao.outorgante.nome}'
    }
    
    return render(request, 'assejus/procuracao_confirm_delete.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_print(request, pk):
    """Imprimir procura√ß√£o"""
    from datetime import datetime
    
    procuracao = get_object_or_404(ProcuracaoAdJudicia, pk=pk)
    
    # Data em portugu√™s (igual ao PDF)
    meses_pt = {
        1: 'janeiro', 2: 'fevereiro', 3: 'mar√ßo', 4: 'abril',
        5: 'maio', 6: 'junho', 7: 'julho', 8: 'agosto',
        9: 'setembro', 10: 'outubro', 11: 'novembro', 12: 'dezembro'
    }
    
    data_atual = datetime.now()
    data_pt = f"{data_atual.day} de {meses_pt[data_atual.month]} de {data_atual.year}"
    
    context = {
        'procuracao': procuracao,
        'texto_procuracao': procuracao.get_texto_procuracao(),
        'data_pt': data_pt,
        'title': f'Procura√ß√£o - {procuracao.outorgante.nome}'
    }
    
    return render(request, 'assejus/procuracao_print.html', context)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def get_associado_data(request, associado_id):
    """Buscar dados do associado via AJAX"""
    try:
        from associados.models import Associado
        associado = Associado.objects.get(pk=associado_id)
        
        # Montar endere√ßo completo
        endereco_completo = f"{associado.rua}, {associado.numero}"
        if associado.complemento:
            endereco_completo += f", {associado.complemento}"
        endereco_completo += f", {associado.bairro}, {associado.cidade} - {associado.estado}, CEP: {associado.cep}"
        
        # Mapear dados militares baseados nos campos dispon√≠veis no modelo Associado
        cargo_militar = associado.get_posto_graduacao_display() if associado.posto_graduacao else ''
        matricula_funcional = associado.matricula_militar or ''
        rgpmpi = associado.tipo_documento.upper() + ': ' + (associado.rg or '') if associado.tipo_documento and associado.rg else ''
        
        data = {
            'nome': associado.nome,
            'cpf': associado.cpf,
            'cargo_militar': cargo_militar,
            'matricula_funcional': matricula_funcional,
            'rgpmpi': rgpmpi,
            'endereco_completo': endereco_completo,
            'telefone': associado.telefone or associado.celular or '',
            'email': associado.email or '',
            'naturalidade': associado.naturalidade or '',
            'nacionalidade': associado.nacionalidade or '',
            'tipo_profissional': associado.get_tipo_profissional_display() or '',
            'unidade_lotacao': getattr(associado, 'unidade_lotacao', '') or '',
        }
        
        return JsonResponse(data)
    except Associado.DoesNotExist:
        return JsonResponse({'error': 'Associado n√£o encontrado'}, status=404)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def get_advogado_data(request, advogado_id):
    """Buscar dados do advogado via AJAX"""
    try:
        advogado = Advogado.objects.get(pk=advogado_id)
        
        # Montar endere√ßo completo
        endereco_completo = f"{advogado.endereco}, {advogado.cidade} - {advogado.estado}, CEP: {advogado.cep}"
        
        data = {
            'nome': advogado.nome,
            'cpf': advogado.cpf,
            'oab': advogado.oab,
            'uf_oab': advogado.uf_oab,
            'oab_completa': f"{advogado.oab}/{advogado.uf_oab}",
            'endereco_completo': endereco_completo,
            'telefone': advogado.telefone,
            'celular': advogado.celular or '',
            'email': advogado.email,
            'especialidades': advogado.especialidades or '',
            'situacao': advogado.get_situacao_display(),
        }
        
        return JsonResponse(data)
    except Advogado.DoesNotExist:
        return JsonResponse({'error': 'Advogado n√£o encontrado'}, status=404)


def limpar_html_para_pdf(html_content):
    """
    Limpa HTML removendo atributos n√£o suportados pelo ReportLab
    """
    import re
    
    if not html_content:
        return ""
    
    # Lista de atributos n√£o suportados pelo ReportLab
    atributos_nao_suportados = [
        'dir', 'style', 'class', 'id', 'data-*', 'onclick', 'onload',
        'vertical-align', 'text-align', 'margin', 'padding', 'border',
        'background', 'color', 'font-family', 'font-size', 'font-weight'
    ]
    
    # Remover atributos n√£o suportados das tags font
    html_content = re.sub(r'<font[^>]*\sdir="[^"]*"[^>]*>', '<font>', html_content)
    html_content = re.sub(r'<font[^>]*\sstyle="[^"]*"[^>]*>', '<font>', html_content)
    html_content = re.sub(r'<font[^>]*\sclass="[^"]*"[^>]*>', '<font>', html_content)
    
    # Remover tags font vazias ou com apenas atributos n√£o suportados
    html_content = re.sub(r'<font[^>]*></font>', '', html_content)
    
    # Limpar tags font aninhadas desnecess√°rias
    html_content = re.sub(r'<font><font>', '<font>', html_content)
    html_content = re.sub(r'</font></font>', '</font>', html_content)
    
    # Remover atributos n√£o suportados de outras tags
    for attr in atributos_nao_suportados:
        if attr == 'data-*':
            # Remover todos os atributos data-*
            html_content = re.sub(r'\s+data-[a-zA-Z0-9-]+="[^"]*"', '', html_content)
        else:
            # Remover atributo espec√≠fico
            html_content = re.sub(rf'\s+{attr}="[^"]*"', '', html_content)
    
    # Limpar espa√ßos extras em tags
    html_content = re.sub(r'<([^>]+)\s+>', r'<\1>', html_content)
    
    # Normalizar quebras de linha
    html_content = re.sub(r'<br\s*/?>', '<br/>', html_content)
    
    # Remover tags vazias desnecess√°rias
    html_content = re.sub(r'<font></font>', '', html_content)
    html_content = re.sub(r'<span></span>', '', html_content)
    
    # Limpar m√∫ltiplas quebras de linha
    html_content = re.sub(r'<br/>\s*<br/>\s*<br/>', '<br/><br/>', html_content)
    
    return html_content


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def procuracao_pdf(request, pk):
    """Gerar PDF da procura√ß√£o com cabe√ßalho institucional e rodap√©"""
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    from reportlab.platypus import Table, TableStyle, Spacer, Paragraph, SimpleDocTemplate, PageBreak, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
    from reportlab.lib.pagesizes import A4
    from reportlab.graphics.shapes import Drawing, Rect, Line
    from reportlab.graphics import renderPDF
    from django.utils import timezone
    import os
    
    procuracao = get_object_or_404(ProcuracaoAdJudicia, pk=pk)
    
    # Criar PDF
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'inline; filename="procuracao_{procuracao.outorgante.nome.replace(" ", "_")}_{procuracao.pk}.pdf"'
    
    # Criar documento com margem superior de 1cm (28.35 pontos)
    doc = SimpleDocTemplate(response, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=28.35, bottomMargin=72)
    story = []
    
    # Estilos
    styles = getSampleStyleSheet()
    
    # Fun√ß√£o para obter logo
    def get_logo_path(filename):
        from django.conf import settings
        logo_path = os.path.join(settings.BASE_DIR, 'static', filename)
        if os.path.exists(logo_path):
            return logo_path
        logo_path = os.path.join(settings.STATIC_ROOT, filename)
        if os.path.exists(logo_path):
            return logo_path
        return None
    
    # Fun√ß√£o para criar rodap√©
    def create_footer(canvas, doc):
        canvas.saveState()
        
        # Texto do rodap√©
        footer_text = """
        Reconhecimento de Utilidade P√∫blica Estadual Lei n¬∫ 5.614 28/11/06 |
        Reconhecimento de Utilidade P√∫blica Municipal Lei n¬∫ 3.634 14/05/07 |
        Fone: 86 3085-1722 | E-mail: abmepi@gmail.com |
        Endere√ßo: Rua Coelho Rodrigues, 2242, Centro Sul, CEP: 64.000-080, Teresina ‚Äì PI
        """
        
        # Posicionar rodap√© na parte inferior da p√°gina
        canvas.setFont('Helvetica', 7)
        canvas.setFillColor(colors.black)
        
        # Desenhar linha separadora
        canvas.setLineWidth(0.5)
        canvas.line(0, 70, 612, 70)
        
        # Adicionar logo da ABMEPI
        try:
            logo_path = get_logo_path('Logo_abmepi.png')
            if logo_path:
                canvas.drawImage(logo_path, 20, 20, width=40, height=40, preserveAspectRatio=True)
                
                # Adicionar dados de gera√ß√£o do documento
                canvas.setFont('Helvetica', 6)
                canvas.setFillColor(colors.black)
                canvas.drawString(20, 10, f"Documento gerado em {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}")
                canvas.drawString(20, 4, "ABMEPI")
        except:
            pass
        
        # Dividir o texto em linhas
        lines = footer_text.strip().split('|')
        y_position = 50
        
        # Garantir que o texto das informa√ß√µes institucionais seja preto
        canvas.setFont('Helvetica', 7)
        canvas.setFillColor(colors.black)
        
        for line in lines:
            line = line.strip()
            if line:
                canvas.drawRightString(580, y_position, line)
                y_position -= 10
        
        canvas.restoreState()
    
    # Adicionar logo2assejur.png no topo com propor√ß√£o 8,66 por 2,41
    try:
        logo_asejur2_path = get_logo_path('logo2assejur.png')
        
        if logo_asejur2_path:
            # Propor√ß√£o 8,66:2,41 = aproximadamente 3,59:1
            # Usando largura de 200px, altura ser√° aproximadamente 56px
            logo = Image(logo_asejur2_path, width=200, height=56)
            logo.hAlign = 'CENTER'
            story.append(logo)
            story.append(Spacer(1, 28.35))  # 1cm de espa√ßamento
    except Exception as e:
        pass
    
    # T√≠tulo do documento
    title_style = ParagraphStyle(
        'TitleStyle',
        parent=styles['Normal'],
        fontSize=16,
        textColor=colors.black,
        spaceAfter=15,
        spaceBefore=5,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    story.append(Paragraph("<b>P R O C U R A √á √É O   A D   J U D I C I A   E T   E X T R A</b>", title_style))
    story.append(Spacer(1, 15))
    
    # Texto da procura√ß√£o
    texto_style = ParagraphStyle(
        'TextoStyle',
        parent=styles['Normal'],
        fontSize=12,
        textColor=colors.black,
        spaceAfter=4,
        spaceBefore=0,
        alignment=TA_JUSTIFY,
        fontName='Times-Roman',
        leading=14
    )
    
    # Obter texto da procura√ß√£o
    texto_procuracao = procuracao.get_texto_procuracao()
    
    # Limpar HTML removendo atributos n√£o suportados pelo ReportLab
    texto_procuracao = limpar_html_para_pdf(texto_procuracao)
    
    # Garantir que todas as tags HTML estejam bem formadas
    # Remover quebras de linha desnecess√°rias e normalizar espa√ßos
    import re
    texto_procuracao = re.sub(r'\n+', '\n', texto_procuracao)
    texto_procuracao = re.sub(r' +', ' ', texto_procuracao)
    
    # Dividir o texto em par√°grafos e adicionar
    paragrafos = texto_procuracao.split('\n\n')
    for i, paragrafo in enumerate(paragrafos):
        if paragrafo.strip():
            # Limpar o par√°grafo de caracteres problem√°ticos
            paragrafo_limpo = paragrafo.strip()
            
            try:
                story.append(Paragraph(paragrafo_limpo, texto_style))
                # Reduzir espa√ßamento entre par√°grafos
                if i < len(paragrafos) - 1:
                    story.append(Spacer(1, 8))
            except Exception as e:
                # Se ainda houver erro, tentar com texto limpo sem HTML
                paragrafo_sem_html = re.sub(r'<[^>]+>', '', paragrafo_limpo)
                story.append(Paragraph(paragrafo_sem_html, texto_style))
                if i < len(paragrafos) - 1:
                    story.append(Spacer(1, 8))
    
    # Adicionar data em portugu√™s e nome do outorgante centralizados
    story.append(Spacer(1, 20))
    
    # Data em portugu√™s
    from datetime import datetime
    meses_pt = {
        1: 'janeiro', 2: 'fevereiro', 3: 'mar√ßo', 4: 'abril',
        5: 'maio', 6: 'junho', 7: 'julho', 8: 'agosto',
        9: 'setembro', 10: 'outubro', 11: 'novembro', 12: 'dezembro'
    }
    
    data_atual = datetime.now()
    data_pt = f"{data_atual.day} de {meses_pt[data_atual.month]} de {data_atual.year}"
    
    # Estilo para data e assinatura
    assinatura_style = ParagraphStyle(
        'AssinaturaStyle',
        parent=styles['Normal'],
        fontSize=12,
        textColor=colors.black,
        spaceAfter=20,
        spaceBefore=20,
        alignment=TA_CENTER,
        fontName='Helvetica'
    )
    
    # Adicionar data e nome do outorgante centralizados
    story.append(Paragraph(f"{procuracao.outorgante.cidade or 'Teresina'} ({procuracao.outorgante.estado or 'PI'}), {data_pt}.", assinatura_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph(f"<b>{procuracao.outorgante.nome}</b>", assinatura_style))
    
    # Construir PDF com rodap√© em todas as p√°ginas
    doc.build(story, onFirstPage=create_footer, onLaterPages=create_footer)
    
    return response


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def processo_edit(request, pk):
    """Editar processo jur√≠dico"""
    processo = get_object_or_404(ProcessoJuridico, pk=pk)
    
    if request.method == 'POST':
        form = ProcessoJuridicoForm(request.POST, instance=processo)
        if form.is_valid():
            processo = form.save()
            messages.success(request, f'Processo {processo.numero_processo} atualizado com sucesso!')
            return redirect('assejus:processo_detail', pk=processo.pk)
    else:
        form = ProcessoJuridicoForm(instance=processo)
    
    return render(request, 'assejus/processo_form.html', {'form': form, 'title': 'Editar Processo'})


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def andamento_modal_create(request):
    """View para criar andamento via modal"""
    if request.method == 'POST':
        form = AndamentoForm(request.POST)
        if form.is_valid():
            andamento = form.save(commit=False)
            andamento.usuario_registro = request.user
            andamento.save()
            form.save_m2m()
            
            return JsonResponse({
                'success': True,
                'message': f'Andamento criado com sucesso!',
                'reload': True,
                'id': andamento.id,
            })
        else:
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    # Verificar se h√° um processo espec√≠fico na URL
    processo_id = request.GET.get('processo')
    initial_data = {}
    
    if processo_id:
        try:
            processo = ProcessoJuridico.objects.get(pk=processo_id)
            initial_data['processo'] = processo
        except ProcessoJuridico.DoesNotExist:
            pass
    
    form = AndamentoForm(initial=initial_data)
    
    # Buscar processos ativos para o contexto
    processos = ProcessoJuridico.objects.filter(
        situacao_atual__in=['andamento', 'suspenso']
    ).order_by('-data_atualizacao')
    
    # Atualizar o queryset do campo processo
    form.fields['processo'].queryset = processos
    
    form_html = render_to_string('assejus/forms/andamento_form_modal.html', {
        'form': form,
        'processos': processos
    }, request=request)
    return JsonResponse({'form_html': form_html})


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def andamento_modal_update(request, pk):
    """View para editar andamento via modal"""
    try:
        andamento = get_object_or_404(Andamento, pk=pk)
        
        if request.method == 'POST':
            form = AndamentoForm(request.POST, instance=andamento)
            if form.is_valid():
                andamento = form.save()
                return JsonResponse({
                    'success': True,
                    'message': f'Andamento {andamento.titulo} atualizado com sucesso!',
                    'reload': True,
                    'id': andamento.id
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': 'Erro na valida√ß√£o do formul√°rio.',
                    'errors': form.errors
                })
        
        form = AndamentoForm(instance=andamento)
        form_html = render_to_string('assejus/forms/andamento_form_modal.html', {'form': form}, request=request)
        return JsonResponse({'form_html': form_html})
        
    except Exception as e:
        import traceback
        print(f"Erro na view andamento_modal_update: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }, status=500)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def consulta_modal_create(request):
    """View para criar consulta via modal"""
    if request.method == 'POST':
        form = ConsultaJuridicaForm(request.POST)
        if form.is_valid():
            consulta = form.save()
            return JsonResponse({
                'success': True,
                'message': f'Consulta jur√≠dica criada com sucesso!',
                'reload': True,
                'id': consulta.id
            })
        else:
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    form = ConsultaJuridicaForm()
    form_html = render_to_string('assejus/forms/consulta_form_modal.html', {'form': form}, request=request)
    return JsonResponse({'form_html': form_html})


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def consulta_modal_update(request, pk):
    """View para editar consulta via modal"""
    try:
        consulta = get_object_or_404(ConsultaJuridica, pk=pk)
        
        if request.method == 'POST':
            form = ConsultaJuridicaForm(request.POST, instance=consulta)
            if form.is_valid():
                consulta = form.save()
                return JsonResponse({
                    'success': True,
                    'message': f'Consulta jur√≠dica atualizada com sucesso!',
                    'reload': True,
                    'id': consulta.id
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': 'Erro na valida√ß√£o do formul√°rio.',
                    'errors': form.errors
                })
        
        form = ConsultaJuridicaForm(instance=consulta)
        form_html = render_to_string('assejus/forms/consulta_form_modal.html', {'form': form}, request=request)
        return JsonResponse({'form_html': form_html})
        
    except Exception as e:
        import traceback
        print(f"Erro na view consulta_modal_update: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }, status=500)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def relatorio_modal_create(request):
    """View para criar relat√≥rio via modal"""
    if request.method == 'POST':
        form = RelatorioJuridicoForm(request.POST)
        if form.is_valid():
            relatorio = form.save()
            return JsonResponse({
                'success': True,
                'message': f'Relat√≥rio jur√≠dico criado com sucesso!',
                'reload': True,
                'id': relatorio.id
            })
        else:
            return JsonResponse({
                'success': False,
                'message': 'Erro na valida√ß√£o do formul√°rio.',
                'errors': form.errors
            })
    
    form = RelatorioJuridicoForm()
    form_html = render_to_string('assejus/forms/relatorio_form_modal.html', {'form': form}, request=request)
    return JsonResponse({'form_html': form_html})


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def relatorio_modal_update(request, pk):
    """View para editar relat√≥rio via modal"""
    try:
        relatorio = get_object_or_404(RelatorioJuridico, pk=pk)
        
        if request.method == 'POST':
            form = RelatorioJuridicoForm(request.POST, instance=relatorio)
            if form.is_valid():
                relatorio = form.save()
                return JsonResponse({
                    'success': True,
                    'message': f'Relat√≥rio jur√≠dico atualizado com sucesso!',
                    'reload': True,
                    'id': relatorio.id
                })
            else:
                return JsonResponse({
                    'success': False,
                    'message': 'Erro na valida√ß√£o do formul√°rio.',
                    'errors': form.errors
                })
        
        form = RelatorioJuridicoForm(instance=relatorio)
        form_html = render_to_string('assejus/forms/relatorio_form_modal.html', {'form': form}, request=request)
        return JsonResponse({'form_html': form_html})
        
    except Exception as e:
        import traceback
        print(f"Erro na view relatorio_modal_update: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return JsonResponse({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }, status=500)


@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def advogado_detail_modal(request, pk):
    """View para exibir detalhes do advogado via modal"""
    print(f"=== DEBUG: advogado_detail_modal chamada ===")
    print(f"DEBUG: M√©todo da requisi√ß√£o: {request.method}")
    print(f"DEBUG: User: {request.user}")
    print(f"DEBUG: PK recebido: {pk}")
    
    try:
        advogado = get_object_or_404(Advogado, pk=pk)
        print(f"DEBUG: Advogado encontrado: {advogado.nome}")
        
        # Calcular estat√≠sticas do advogado
        total_casos = AtendimentoJuridico.objects.filter(advogado_responsavel=advogado).count()
        casos_em_andamento = AtendimentoJuridico.objects.filter(
            advogado_responsavel=advogado,
            status__in=['em_andamento', 'em_analise', 'aguardando_documentos', 'aguardando_decisao']
        ).count()
        casos_concluidos = AtendimentoJuridico.objects.filter(
            advogado_responsavel=advogado,
            status='concluido'
        ).count()
        
        print(f"DEBUG: Estat√≠sticas calculadas - Total: {total_casos}, Em andamento: {casos_em_andamento}, Conclu√≠dos: {casos_concluidos}")
        
        context = {
            'advogado': advogado,
            'total_casos': total_casos,
            'casos_em_andamento': casos_em_andamento,
            'casos_concluidos': casos_concluidos,
        }
        
        print(f"DEBUG: Context criado com {len(context)} itens")
        
        # Renderizar o template de detalhes completo (incluindo o modal)
        modal_html = render(request, 'assejus/advogado_detail_modal.html', context).content.decode('utf-8')
        print(f"DEBUG: Modal HTML renderizado com {len(modal_html)} caracteres")
        print(f"DEBUG: Primeiros 200 caracteres do HTML: {modal_html[:200]}...")
        
        return JsonResponse({
            'success': True,
            'modal_html': modal_html,
            'advogado': {
                'id': advogado.id,
                'nome': advogado.nome,
                'oab': advogado.oab,
                'uf_oab': advogado.uf_oab,
                'email': advogado.email,
                'telefone': advogado.telefone,
                'celular': advogado.celular,
                'endereco': advogado.endereco,
                'cidade': advogado.cidade,
                'estado': advogado.estado,
                'cep': advogado.cep,
                'especialidades': advogado.especialidades,
                'data_inscricao_oab': advogado.data_inscricao_oab.strftime('%d/%m/%Y') if advogado.data_inscricao_oab else '',
                'experiencia_anos': advogado.experiencia_anos,
                'ativo': advogado.ativo,
                'observacoes': advogado.observacoes,
                'data_cadastro': advogado.data_cadastro.strftime('%d/%m/%Y √†s %H:%M') if advogado.data_cadastro else '',
                'data_atualizacao': advogado.data_atualizacao.strftime('%d/%m/%Y √†s %H:%M') if advogado.data_atualizacao else '',
            }
        })
        
    except Exception as e:
        print(f"‚ùå Erro na view advogado_detail_modal: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        
        return JsonResponse({
            'success': False,
            'message': f'Erro ao carregar detalhes do advogado: {str(e)}'
        })

@require_user_type(['administrador_sistema', 'advogado', 'atendente_advogado'])
def modal_base(request):
    """View para servir o template base de modais"""
    return render(request, 'assejus/modal_base.html')


# ===== VIEWS PARA MODELOS DE PODERES =====

@login_required
def listar_modelos_poderes(request, tipo):
    """
    Listar modelos de poderes dispon√≠veis para AJAX
    """
    try:
        # Buscar modelos que o usu√°rio pode acessar
        modelos = ModeloPoderes.objects.filter(
            Q(publico=True) | Q(criado_por=request.user),
            ativo=True,
            tipo=tipo
        ).order_by('-data_criacao')

        # Aplicar filtros
        search = request.GET.get('search', '')
        if search:
            modelos = modelos.filter(
                Q(nome__icontains=search) |
                Q(descricao__icontains=search)
            )

        categoria = request.GET.get('categoria', '')
        if categoria:
            modelos = modelos.filter(categoria=categoria)

        # Renderizar apenas os cards dos modelos
        context = {
            'modelos': modelos,
            'categorias': ModeloPoderes.CATEGORIA_CHOICES,
            'categoria_atual': categoria,
            'search': search,
            'tipo': tipo
        }

        return render(request, 'assejus/modelos_poderes_list.html', context)

    except Exception as e:
        return render(request, 'assejus/modelos_poderes_list.html', {
            'modelos': [],
            'error': str(e),
            'tipo': tipo
        })


@login_required
def salvar_modelo_poderes(request):
    """
    Salvar modelo de poderes via AJAX
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'message': 'M√©todo n√£o permitido'})

    try:
        nome = request.POST.get('nome', '').strip()
        descricao = request.POST.get('descricao', '').strip()
        categoria = request.POST.get('categoria', 'geral')
        tipo = request.POST.get('tipo', '')
        conteudo = request.POST.get('conteudo', '').strip()
        publico = request.POST.get('publico') == 'true'

        # Valida√ß√µes
        if not nome:
            return JsonResponse({'success': False, 'message': 'Nome do modelo √© obrigat√≥rio'})

        if not tipo or tipo not in ['gerais', 'especificos']:
            return JsonResponse({'success': False, 'message': 'Tipo de poderes inv√°lido'})

        if not conteudo or conteudo == '<div><br></div>':
            return JsonResponse({'success': False, 'message': 'Conte√∫do do modelo n√£o pode estar vazio'})

        # Verificar se j√° existe modelo com mesmo nome e tipo do usu√°rio
        if ModeloPoderes.objects.filter(
            nome=nome, 
            criado_por=request.user, 
            tipo=tipo
        ).exists():
            return JsonResponse({'success': False, 'message': 'J√° existe um modelo com este nome para este tipo de poderes'})

        # Criar modelo
        modelo = ModeloPoderes.objects.create(
            nome=nome,
            descricao=descricao,
            categoria=categoria,
            tipo=tipo,
            conteudo=conteudo,
            publico=publico,
            criado_por=request.user
        )

        return JsonResponse({
            'success': True,
            'message': 'Modelo salvo com sucesso!',
            'modelo_id': modelo.id
        })

    except Exception as e:
        return JsonResponse({'success': False, 'message': f'Erro ao salvar modelo: {str(e)}'})


@login_required
def obter_modelo_poderes(request, modelo_id):
    """
    Obter conte√∫do de um modelo espec√≠fico via AJAX
    """
    try:
        modelo = ModeloPoderes.objects.get(
            pk=modelo_id,
            ativo=True
        )

        # Verificar se o usu√°rio pode acessar o modelo
        if not modelo.publico and modelo.criado_por != request.user:
            return JsonResponse({'success': False, 'message': 'Acesso negado ao modelo'})

        return JsonResponse({
            'success': True,
            'modelo': {
                'id': modelo.id,
                'nome': modelo.nome,
                'descricao': modelo.descricao,
                'categoria': modelo.categoria,
                'categoria_display': modelo.get_categoria_display(),
                'publico': modelo.publico,
                'conteudo': modelo.conteudo,
                'data_criacao': modelo.data_criacao.strftime('%d/%m/%Y %H:%M'),
                'criado_por': {
                    'nome': modelo.criado_por.get_full_name() or modelo.criado_por.username,
                    'username': modelo.criado_por.username
                }
            }
        })

    except ModeloPoderes.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'Modelo n√£o encontrado'})
    except Exception as e:
        return JsonResponse({'success': False, 'message': f'Erro ao obter modelo: {str(e)}'})


@login_required
def excluir_modelo_poderes(request, modelo_id):
    """
    Excluir modelo de poderes via AJAX
    """
    if request.method != 'DELETE':
        return JsonResponse({'success': False, 'message': 'M√©todo n√£o permitido'})

    try:
        modelo = ModeloPoderes.objects.get(
            pk=modelo_id,
            criado_por=request.user  # Apenas o criador pode excluir
        )
        
        modelo.delete()
        
        return JsonResponse({
            'success': True,
            'message': 'Modelo exclu√≠do com sucesso!'
        })

    except ModeloPoderes.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'Modelo n√£o encontrado ou voc√™ n√£o tem permiss√£o para exclu√≠-lo'})
    except Exception as e:
        return JsonResponse({'success': False, 'message': f'Erro ao excluir modelo: {str(e)}'})





