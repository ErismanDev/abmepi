#!/usr/bin/env python
"""
Script para testar a funcionalidade de acesso restrito a fichas de pacientes 
ap√≥s primeira sess√£o finalizada.
"""
import os
import django

# Configurar o Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'abmepi.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from psicologia.models import Paciente, Sessao, Psicologo
from associados.models import Associado
from datetime import datetime, date

def test_acesso_restrito():
    """Testa a funcionalidade de acesso restrito ap√≥s primeira sess√£o finalizada"""
    
    print("üß™ Testando acesso restrito a fichas de pacientes...")
    
    # Buscar usu√°rios de teste
    User = get_user_model()
    
    # Buscar psic√≥logo
    try:
        psicologo1 = Psicologo.objects.filter(ativo=True).first()
        if not psicologo1:
            print("‚ùå Nenhum psic√≥logo encontrado")
            return
        
        user_psicologo1 = psicologo1.user
        print(f"‚úÖ Psic√≥logo 1 encontrado: {psicologo1.nome_completo}")
        print(f"   Usu√°rio: {user_psicologo1.username} - Tipo: {user_psicologo1.tipo_usuario}")
        
        # Buscar outro psic√≥logo se existir
        psicologo2 = Psicologo.objects.filter(ativo=True).exclude(pk=psicologo1.pk).first()
        if psicologo2:
            user_psicologo2 = psicologo2.user
            print(f"‚úÖ Psic√≥logo 2 encontrado: {psicologo2.nome_completo}")
            print(f"   Usu√°rio: {user_psicologo2.username} - Tipo: {user_psicologo2.tipo_usuario}")
        
        # Buscar administrador
        admin_user = User.objects.filter(tipo_usuario='administrador_sistema').first()
        if not admin_user:
            print("‚ùå Nenhum usu√°rio administrador encontrado")
            return
        print(f"‚úÖ Administrador encontrado: {admin_user.username}")
        
        # Buscar atendente se existir
        atendente_user = User.objects.filter(tipo_usuario='atendente_psicologo').first()
        if atendente_user:
            print(f"‚úÖ Atendente encontrado: {atendente_user.username}")
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar usu√°rios: {e}")
        return
    
    # Buscar um paciente com psic√≥logo respons√°vel
    try:
        paciente = Paciente.objects.filter(
            psicologo_responsavel__isnull=False,
            ativo=True
        ).first()
        
        if not paciente:
            print("‚ùå Nenhum paciente com psic√≥logo respons√°vel encontrado")
            return
        
        print(f"‚úÖ Paciente encontrado: {paciente.nome_completo}")
        print(f"   Psic√≥logo respons√°vel: {paciente.psicologo_responsavel.nome_completo}")
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar paciente: {e}")
        return
    
    # Verificar se existe sess√£o realizada
    sessao_realizada = Sessao.objects.filter(
        paciente=paciente,
        status='realizada'
    ).first()
    
    if not sessao_realizada:
        print("üìù Criando sess√£o realizada para teste...")
        # Criar uma sess√£o realizada
        sessao_realizada = Sessao.objects.create(
            paciente=paciente,
            psicologo=paciente.psicologo_responsavel,
            data_hora=datetime.now(),
            status='realizada',
            tipo_sessao='terapia',
            duracao=50,
            observacoes='Sess√£o de teste para verificar acesso restrito'
        )
        print(f"‚úÖ Sess√£o realizada criada: {sessao_realizada.pk}")
    else:
        print(f"‚úÖ Sess√£o realizada j√° existe: {sessao_realizada.pk}")
    
    # Testar acessos
    client = Client()
    paciente_url = reverse('psicologia:paciente_detail', kwargs={'pk': paciente.pk})
    
    print("\nüîí Testando regras de acesso...")
    
    # 1. Teste com psic√≥logo respons√°vel - DEVE PERMITIR
    print(f"\n1Ô∏è‚É£ Testando acesso do psic√≥logo respons√°vel ({paciente.psicologo_responsavel.nome_completo})...")
    
    # Verificar qual psic√≥logo √© o respons√°vel
    if paciente.psicologo_responsavel == psicologo1:
        client.force_login(user_psicologo1)
    elif paciente.psicologo_responsavel == psicologo2:
        client.force_login(user_psicologo2)
    else:
        print(f"‚ö†Ô∏è Psic√≥logo respons√°vel n√£o est√° na lista de teste: {paciente.psicologo_responsavel.nome_completo}")
        return
    
    response = client.get(paciente_url)
    
    if response.status_code == 200:
        print("‚úÖ SUCESSO: Psic√≥logo respons√°vel pode acessar a ficha")
    else:
        print(f"‚ùå ERRO: Psic√≥logo respons√°vel foi bloqueado! Status: {response.status_code}")
        if hasattr(response, 'content'):
            print(f"Conte√∫do da resposta: {response.content[:500]}")
    
    # 2. Teste com outro psic√≥logo - DEVE BLOQUEAR
    if psicologo2 and psicologo2 != paciente.psicologo_responsavel:
        print(f"\n2Ô∏è‚É£ Testando acesso de outro psic√≥logo ({psicologo2.nome_completo})...")
        client.force_login(user_psicologo2)
        response = client.get(paciente_url)
        
        if response.status_code == 302:  # Redirecionamento
            print("‚úÖ SUCESSO: Outro psic√≥logo foi bloqueado corretamente")
        else:
            print(f"‚ùå ERRO: Outro psic√≥logo deveria ser bloqueado! Status: {response.status_code}")
    
    # 3. Teste com administrador - DEVE PERMITIR
    print(f"\n3Ô∏è‚É£ Testando acesso do administrador ({admin_user.username})...")
    client.force_login(admin_user)
    response = client.get(paciente_url)
    
    if response.status_code == 200:
        print("‚úÖ SUCESSO: Administrador pode acessar a ficha")
    else:
        print(f"‚ùå ERRO: Administrador foi bloqueado! Status: {response.status_code}")
    
    # 4. Teste com atendente - DEVE BLOQUEAR
    if atendente_user:
        print(f"\n4Ô∏è‚É£ Testando acesso do atendente ({atendente_user.username})...")
        client.force_login(atendente_user)
        response = client.get(paciente_url)
        
        if response.status_code == 302:  # Redirecionamento
            print("‚úÖ SUCESSO: Atendente foi bloqueado corretamente")
        else:
            print(f"‚ùå ERRO: Atendente deveria ser bloqueado! Status: {response.status_code}")
    
    print("\nüìã Resumo dos testes:")
    print("- ‚úÖ Psic√≥logo respons√°vel: Acesso permitido")
    if psicologo2:
        print("- üö´ Outro psic√≥logo: Acesso bloqueado")
    print("- ‚úÖ Administrador: Acesso permitido")
    if atendente_user:
        print("- üö´ Atendente: Acesso bloqueado")
    
    print("\nüéØ Regra implementada com sucesso!")
    print("üìù Depois da 1¬™ sess√£o finalizada, s√≥ o psic√≥logo respons√°vel pode acessar a ficha do paciente.")
    print("   (Administradores do sistema mant√™m acesso total)")

if __name__ == "__main__":
    test_acesso_restrito()
