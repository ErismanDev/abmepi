#!/bin/bash

# Script de Inicializa√ß√£o R√°pida - ABMEPI
# Para desenvolvimento local ou teste r√°pido

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

log "üöÄ Iniciando configura√ß√£o r√°pida do ABMEPI..."

# Verificar se Python est√° instalado
if ! command -v python3 &> /dev/null; then
    error "Python 3 n√£o est√° instalado. Instale Python 3.8+ primeiro."
fi

# Verificar se pip est√° instalado
if ! command -v pip3 &> /dev/null; then
    error "pip3 n√£o est√° instalado. Instale pip primeiro."
fi

# Criar ambiente virtual se n√£o existir
if [ ! -d "venv" ]; then
    log "Criando ambiente virtual Python..."
    python3 -m venv venv
fi

# Ativar ambiente virtual
log "Ativando ambiente virtual..."
source venv/bin/activate

# Instalar depend√™ncias
log "Instalando depend√™ncias Python..."
pip install --upgrade pip
pip install -r requirements.txt

# Criar arquivo .env se n√£o existir
if [ ! -f ".env" ]; then
    log "Criando arquivo de configura√ß√£o .env..."
    cp env.example .env
    warning "Configure as vari√°veis no arquivo .env antes de continuar!"
    warning "Especialmente: SECRET_KEY, DB_PASSWORD, EMAIL_HOST_PASSWORD"
fi

# Verificar se PostgreSQL est√° rodando
if ! pg_isready -q; then
    warning "PostgreSQL n√£o est√° rodando. Iniciando..."
    if command -v systemctl &> /dev/null; then
        sudo systemctl start postgresql
    elif command -v service &> /dev/null; then
        sudo service postgresql start
    else
        error "N√£o foi poss√≠vel iniciar o PostgreSQL automaticamente. Inicie manualmente."
    fi
fi

# Criar banco de dados se n√£o existir
log "Verificando banco de dados..."
python manage.py migrate --settings=abmepi.settings

# Coletar arquivos est√°ticos
log "Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput --settings=abmepi.settings

# Criar superusu√°rio se n√£o existir
log "Verificando superusu√°rio..."
python manage.py shell --settings=abmepi.settings << EOF
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@abmepi.org.br', 'admin123')
    print('Superusu√°rio criado: admin/admin123')
else:
    print('Superusu√°rio j√° existe')
EOF

# Criar diret√≥rios necess√°rios
log "Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p media
mkdir -p staticfiles

# Verificar configura√ß√£o
log "Verificando configura√ß√£o..."
python manage.py check --settings=abmepi.settings

log "‚úÖ Configura√ß√£o r√°pida conclu√≠da!"
log ""
log "üåê Para iniciar o servidor de desenvolvimento:"
log "   source venv/bin/activate"
log "   python manage.py runserver"
log ""
log "üë§ Credenciais de acesso:"
log "   Usu√°rio: admin"
log "   Senha: admin123"
log "   URL: http://localhost:8000/admin/"
log ""
log "üìù Pr√≥ximos passos:"
log "   1. Configure as vari√°veis no arquivo .env"
log "   2. Execute: python manage.py runserver"
log "   3. Acesse: http://localhost:8000"
log "   4. Para produ√ß√£o, use: ./deploy.sh"
