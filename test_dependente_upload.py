#!/usr/bin/env python
"""
Script de teste para verificar upload de fotos de dependentes
"""
import os
import sys
import django
from django.core.files.uploadedfile import SimpleUploadedFile

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'abmepi.settings')
django.setup()

from associados.models import Dependente, Associado
from associados.forms import DependenteForm

def test_dependente_upload():
    """Testa o upload de foto para dependente"""
    print("=== Teste de Upload de Foto para Dependente ===")
    
    # Verificar se existe pelo menos um associado
    try:
        associado = Associado.objects.first()
        if not associado:
            print("‚ùå Nenhum associado encontrado. Crie um associado primeiro.")
            return False
        print(f"‚úÖ Associado encontrado: {associado.nome}")
    except Exception as e:
        print(f"‚ùå Erro ao buscar associado: {e}")
        return False
    
    # Verificar se existe pelo menos um dependente
    try:
        dependente = Dependente.objects.filter(associado=associado).first()
        if not dependente:
            print("‚ùå Nenhum dependente encontrado para este associado.")
            return False
        print(f"‚úÖ Dependente encontrado: {dependente.nome}")
    except Exception as e:
        print(f"‚ùå Erro ao buscar dependente: {e}")
        return False
    
    # Verificar configura√ß√µes de m√≠dia
    from django.conf import settings
    print(f"üìÅ MEDIA_ROOT: {settings.MEDIA_ROOT}")
    print(f"üåê MEDIA_URL: {settings.MEDIA_URL}")
    
    # Verificar se a pasta de destino existe
    foto_path = os.path.join(settings.MEDIA_ROOT, 'associados', 'dependentes', 'fotos')
    if os.path.exists(foto_path):
        print(f"‚úÖ Pasta de destino existe: {foto_path}")
    else:
        print(f"‚ùå Pasta de destino n√£o existe: {foto_path}")
        return False
    
    # Verificar permiss√µes da pasta
    if os.access(foto_path, os.W_OK):
        print("‚úÖ Pasta tem permiss√£o de escrita")
    else:
        print("‚ùå Pasta n√£o tem permiss√£o de escrita")
        return False
    
    # Verificar se o campo foto est√° presente no modelo
    if hasattr(dependente, 'foto'):
        print("‚úÖ Campo 'foto' existe no modelo")
        print(f"   Tipo do campo: {type(dependente.foto)}")
        print(f"   Valor atual: {dependente.foto}")
    else:
        print("‚ùå Campo 'foto' n√£o existe no modelo")
        return False
    
    # Verificar se o campo foto est√° presente no formul√°rio
    form = DependenteForm(instance=dependente)
    if 'foto' in form.fields:
        print("‚úÖ Campo 'foto' est√° presente no formul√°rio")
        print(f"   Widget: {form.fields['foto'].widget}")
    else:
        print("‚ùå Campo 'foto' n√£o est√° presente no formul√°rio")
        return False
    
    # Verificar se o campo foto est√° nos campos do formul√°rio
    if 'foto' in form.Meta.fields:
        print("‚úÖ Campo 'foto' est√° na lista de campos do formul√°rio")
    else:
        print("‚ùå Campo 'foto' n√£o est√° na lista de campos do formul√°rio")
        return False
    
    print("\n=== Resumo ===")
    print("‚úÖ Todas as verifica√ß√µes passaram!")
    print("O problema pode estar na view ou no processamento do formul√°rio.")
    
    return True

if __name__ == '__main__':
    test_dependente_upload()
