#!/usr/bin/env python3
"""
Script para verificar se a configura√ß√£o Docker Hub est√° correta
"""

import os
import sys
import subprocess

def verificar_docker():
    """Verifica se Docker est√° instalado e funcionando"""
    
    print("üê≥ VERIFICANDO DOCKER")
    print("=" * 25)
    
    try:
        # Verificar se Docker est√° instalado
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ Docker instalado: {result.stdout.strip()}")
        
        # Verificar se Docker est√° rodando
        result = subprocess.run(['docker', 'info'], 
                              capture_output=True, text=True, check=True)
        print("‚úÖ Docker est√° rodando")
        
        # Verificar se est√° logado no Docker Hub
        if 'Username' in result.stdout:
            print("‚úÖ Logado no Docker Hub")
        else:
            print("‚ùå N√£o est√° logado no Docker Hub")
            print("üîë Execute: docker login")
            return False
        
        return True
        
    except subprocess.CalledProcessError:
        print("‚ùå Docker n√£o est√° instalado ou n√£o est√° rodando")
        print("üì• Instale o Docker Desktop: https://www.docker.com/products/docker-desktop/")
        return False
    except FileNotFoundError:
        print("‚ùå Docker n√£o est√° instalado")
        print("üì• Instale o Docker Desktop: https://www.docker.com/products/docker-desktop/")
        return False

def verificar_arquivos_dockerhub():
    """Verifica se todos os arquivos necess√°rios est√£o presentes"""
    
    print("\nüîç VERIFICANDO ARQUIVOS DOCKER HUB")
    print("=" * 40)
    
    arquivos_necessarios = [
        'Dockerfile.dockerhub',
        'docker-compose.dockerhub.yml',
        'deploy-dockerhub.sh',
        'deploy-dockerhub-tags.sh',
        'DEPLOY_DOCKERHUB.md',
        'requirements.txt'
    ]
    
    arquivos_faltando = []
    
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo}")
        else:
            print(f"‚ùå {arquivo} - FALTANDO")
            arquivos_faltando.append(arquivo)
    
    if arquivos_faltando:
        print(f"\n‚ö†Ô∏è  Arquivos faltando: {', '.join(arquivos_faltando)}")
        return False
    else:
        print("\n‚úÖ Todos os arquivos est√£o presentes!")
        return True

def verificar_dockerfile_dockerhub():
    """Verifica se o Dockerfile.dockerhub est√° correto"""
    
    print("\nüê≥ VERIFICANDO DOCKERFILE.DOCKERHUB")
    print("=" * 40)
    
    try:
        with open('Dockerfile.dockerhub', 'r', encoding='utf-8') as f:
            content = f.read()
        
        verificacoes = [
            ('FROM python:', 'Imagem base Python'),
            ('LABEL maintainer=', 'Metadados da imagem'),
            ('LABEL description=', 'Descri√ß√£o da imagem'),
            ('WORKDIR /app', 'Diret√≥rio de trabalho'),
            ('COPY requirements.txt', 'C√≥pia do requirements'),
            ('RUN pip install', 'Instala√ß√£o de depend√™ncias'),
            ('USER appuser', 'Usu√°rio n√£o-root'),
            ('EXPOSE 8080', 'Porta exposta'),
            ('HEALTHCHECK', 'Health check configurado'),
            ('CMD ["gunicorn"', 'Comando de inicializa√ß√£o')
        ]
        
        for check, desc in verificacoes:
            if check in content:
                print(f"‚úÖ {desc}")
            else:
                print(f"‚ùå {desc} - FALTANDO")
        
    except FileNotFoundError:
        print("‚ùå Dockerfile.dockerhub n√£o encontrado")
        return False
    
    return True

def verificar_docker_compose_dockerhub():
    """Verifica se o docker-compose.dockerhub.yml est√° correto"""
    
    print("\nüê≥ VERIFICANDO DOCKER-COMPOSE.DOCKERHUB")
    print("=" * 45)
    
    try:
        with open('docker-compose.dockerhub.yml', 'r', encoding='utf-8') as f:
            content = f.read()
        
        verificacoes = [
            ('version:', 'Vers√£o do compose'),
            ('services:', 'Defini√ß√£o de servi√ßos'),
            ('web:', 'Servi√ßo web'),
            ('db:', 'Servi√ßo de banco'),
            ('nginx:', 'Servi√ßo nginx'),
            ('image: erisman/abmepi', 'Imagem do Docker Hub'),
            ('ports:', 'Mapeamento de portas'),
            ('environment:', 'Vari√°veis de ambiente'),
            ('healthcheck:', 'Health checks configurados')
        ]
        
        for check, desc in verificacoes:
            if check in content:
                print(f"‚úÖ {desc}")
            else:
                print(f"‚ùå {desc} - FALTANDO")
        
    except FileNotFoundError:
        print("‚ùå docker-compose.dockerhub.yml n√£o encontrado")
        return False
    
    return True

def verificar_scripts_deploy():
    """Verifica se os scripts de deploy est√£o corretos"""
    
    print("\nüöÄ VERIFICANDO SCRIPTS DE DEPLOY")
    print("=" * 35)
    
    scripts = [
        'deploy-dockerhub.sh',
        'deploy-dockerhub-tags.sh'
    ]
    
    for script in scripts:
        if os.path.exists(script):
            print(f"‚úÖ {script}")
            
            # Verificar se √© execut√°vel
            if os.access(script, os.X_OK):
                print(f"   ‚úÖ Execut√°vel")
            else:
                print(f"   ‚ö†Ô∏è  N√£o √© execut√°vel (execute: chmod +x {script})")
        else:
            print(f"‚ùå {script} - FALTANDO")
    
    return True

def verificar_requirements():
    """Verifica se o requirements.txt tem as depend√™ncias necess√°rias"""
    
    print("\nüì¶ VERIFICANDO REQUIREMENTS")
    print("=" * 30)
    
    try:
        with open('requirements.txt', 'r', encoding='utf-8') as f:
            content = f.read()
        
        dependencias_necessarias = [
            'Django',
            'gunicorn',
            'psycopg2-binary',
            'whitenoise',
            'dj-database-url'
        ]
        
        for dep in dependencias_necessarias:
            if dep in content:
                print(f"‚úÖ {dep}")
            else:
                print(f"‚ùå {dep} - FALTANDO")
        
    except FileNotFoundError:
        print("‚ùå requirements.txt n√£o encontrado")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    
    print("üê≥ VERIFICA√á√ÉO DA CONFIGURA√á√ÉO DOCKER HUB")
    print("=" * 50)
    
    # Verificar Docker
    docker_ok = verificar_docker()
    
    # Verificar arquivos
    arquivos_ok = verificar_arquivos_dockerhub()
    
    # Verificar configura√ß√µes
    dockerfile_ok = verificar_dockerfile_dockerhub()
    compose_ok = verificar_docker_compose_dockerhub()
    scripts_ok = verificar_scripts_deploy()
    requirements_ok = verificar_requirements()
    
    # Resultado final
    print("\n" + "=" * 50)
    print("üìä RESULTADO FINAL")
    print("=" * 50)
    
    if all([docker_ok, arquivos_ok, dockerfile_ok, compose_ok, scripts_ok, requirements_ok]):
        print("‚úÖ CONFIGURA√á√ÉO DOCKER HUB COMPLETA!")
        print("üöÄ Pronto para deploy no Docker Hub")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Execute: chmod +x deploy-dockerhub.sh")
        print("2. Execute: ./deploy-dockerhub.sh")
        print("3. Verifique se a imagem foi enviada")
        print("4. Teste a imagem localmente")
    else:
        print("‚ùå CONFIGURA√á√ÉO INCOMPLETA!")
        print("üîß Corrija os problemas antes de fazer o deploy")
    
    print("\nüìñ Para mais informa√ß√µes, consulte:")
    print("   - DEPLOY_DOCKERHUB.md")
    print("   - https://hub.docker.com/r/erisman/abmepi")

if __name__ == "__main__":
    main()
