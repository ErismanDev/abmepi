#!/usr/bin/env python3
"""
Script de configura√ß√£o e inicializa√ß√£o do projeto ABMEPI
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path


def run_command(command, description):
    """Executa um comando e exibe o resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao {description.lower()}:")
        print(f"Comando: {command}")
        print(f"Erro: {e.stderr}")
        return False


def check_python_version():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        print(f"Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK!")
    return True


def check_postgresql():
    """Verifica se o PostgreSQL est√° dispon√≠vel"""
    print("\nüêò Verificando PostgreSQL...")
    try:
        result = subprocess.run(['psql', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ PostgreSQL encontrado!")
            return True
        else:
            print("‚ùå PostgreSQL n√£o encontrado!")
            return False
    except FileNotFoundError:
        print("‚ùå PostgreSQL n√£o est√° instalado ou n√£o est√° no PATH!")
        return False


def create_virtual_environment():
    """Cria ambiente virtual Python"""
    if os.path.exists('venv'):
        print("‚úÖ Ambiente virtual j√° existe!")
        return True
    
    return run_command('python -m venv venv', 'Criando ambiente virtual')


def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    if os.name == 'nt':  # Windows
        pip_cmd = 'venv\\Scripts\\pip'
    else:  # Linux/Mac
        pip_cmd = 'venv/bin/pip'
    
    return run_command(f'{pip_cmd} install -r requirements.txt', 'Instalando depend√™ncias')


def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env j√° existe!")
        return True
    
    if os.path.exists('env.example'):
        shutil.copy('env.example', '.env')
        print("‚úÖ Arquivo .env criado a partir do env.example")
        print("‚ö†Ô∏è  Lembre-se de configurar as vari√°veis de ambiente!")
        return True
    
    print("‚ùå Arquivo env.example n√£o encontrado!")
    return False


def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ['static', 'media', 'logs']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    print("‚úÖ Diret√≥rios criados!")
    return True


def run_migrations():
    """Executa as migra√ß√µes do Django"""
    if os.name == 'nt':  # Windows
        python_cmd = 'venv\\Scripts\\python'
    else:  # Linux/Mac
        python_cmd = 'venv/bin/python'
    
    # Verifica se o banco est√° configurado
    if not check_database_connection(python_cmd):
        print("‚ö†Ô∏è  Configure o banco de dados antes de executar as migra√ß√µes!")
        return False
    
    success = run_command(f'{python_cmd} manage.py makemigrations', 'Criando migra√ß√µes')
    if success:
        success = run_command(f'{python_cmd} manage.py migrate', 'Executando migra√ß√µes')
    
    return success


def check_database_connection(python_cmd):
    """Verifica a conex√£o com o banco de dados"""
    try:
        result = subprocess.run(
            f'{python_cmd} manage.py check --database default',
            shell=True, capture_output=True, text=True
        )
        return result.returncode == 0
    except:
        return False


def create_superuser():
    """Cria superusu√°rio se solicitado"""
    response = input("\nü§î Deseja criar um superusu√°rio? (s/n): ").lower().strip()
    
    if response in ['s', 'sim', 'y', 'yes']:
        if os.name == 'nt':  # Windows
            python_cmd = 'venv\\Scripts\\python'
        else:  # Linux/Mac
            python_cmd = 'venv/bin/python'
        
        return run_command(f'{python_cmd} manage.py createsuperuser', 'Criando superusu√°rio')
    
    return True


def collect_static():
    """Coleta arquivos est√°ticos"""
    if os.name == 'nt':  # Windows
        python_cmd = 'venv\\Scripts\\python'
    else:  # Linux/Mac
        python_cmd = 'venv/bin/python'
    
    return run_command(f'{python_cmd} manage.py collectstatic --noinput', 'Coletando arquivos est√°ticos')


def main():
    """Fun√ß√£o principal"""
    print("üöÄ Configurando projeto ABMEPI...")
    print("=" * 50)
    
    # Verifica√ß√µes iniciais
    if not check_python_version():
        sys.exit(1)
    
    if not check_postgresql():
        print("‚ö†Ô∏è  PostgreSQL n√£o encontrado. Configure-o antes de continuar.")
        response = input("Deseja continuar mesmo assim? (s/n): ").lower().strip()
        if response not in ['s', 'sim', 'y', 'yes']:
            sys.exit(1)
    
    # Configura√ß√£o do projeto
    if not create_virtual_environment():
        sys.exit(1)
    
    if not install_dependencies():
        sys.exit(1)
    
    if not create_env_file():
        sys.exit(1)
    
    if not create_directories():
        sys.exit(1)
    
    # Configura√ß√£o do Django
    if not run_migrations():
        print("‚ö†Ô∏è  Migra√ß√µes n√£o executadas. Configure o banco de dados primeiro.")
    
    if not create_superuser():
        sys.exit(1)
    
    if not collect_static():
        print("‚ö†Ô∏è  Arquivos est√°ticos n√£o coletados.")
    
    print("\n" + "=" * 50)
    print("üéâ Configura√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure o arquivo .env com suas credenciais do banco")
    print("2. Execute: python manage.py runserver")
    print("3. Acesse: http://localhost:8000")
    print("\nüìö Para mais informa√ß√µes, consulte o README.md")
    
    # Instru√ß√µes para ativar o ambiente virtual
    if os.name == 'nt':  # Windows
        print("\nüí° Para ativar o ambiente virtual:")
        print("   venv\\Scripts\\activate")
    else:  # Linux/Mac
        print("\nüí° Para ativar o ambiente virtual:")
        print("   source venv/bin/activate")


if __name__ == '__main__':
    main()
