# Generated by Django 5.0.2 on 2025-08-11 13:32

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConfiguracaoSistema",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chave",
                    models.CharField(max_length=100, unique=True, verbose_name="Chave"),
                ),
                ("valor", models.TextField(verbose_name="Valor")),
                ("descricao", models.TextField(blank=True, verbose_name="Descrição")),
                ("ativo", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "data_criacao",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Data de Criação"
                    ),
                ),
                (
                    "data_atualizacao",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Data de Atualização"
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuração do Sistema",
                "verbose_name_plural": "Configurações do Sistema",
                "ordering": ["chave"],
            },
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="CPF no formato XXX.XXX.XXX-XX",
                        max_length=14,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CPF deve estar no formato XXX.XXX.XXX-XX",
                                regex="^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "tipo_usuario",
                    models.CharField(
                        choices=[
                            ("administrador", "Administrador"),
                            ("associado", "Associado"),
                            ("financeiro", "Financeiro"),
                            ("juridico", "Jurídico"),
                        ],
                        default="associado",
                        max_length=20,
                        verbose_name="Tipo de Usuário",
                    ),
                ),
                (
                    "ativo",
                    models.BooleanField(default=True, verbose_name="Usuário Ativo"),
                ),
                (
                    "data_criacao",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Data de Criação"
                    ),
                ),
                (
                    "ultimo_acesso",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Último Acesso"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário",
                "verbose_name_plural": "Usuários",
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="LogAtividade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("acao", models.CharField(max_length=100, verbose_name="Ação")),
                ("modulo", models.CharField(max_length=50, verbose_name="Módulo")),
                ("detalhes", models.TextField(blank=True, verbose_name="Detalhes")),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Endereço IP"
                    ),
                ),
                (
                    "data_hora",
                    models.DateTimeField(auto_now_add=True, verbose_name="Data e Hora"),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuário",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log de Atividade",
                "verbose_name_plural": "Logs de Atividade",
                "ordering": ["-data_hora"],
            },
        ),
    ]
