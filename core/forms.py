from django import forms
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm, UserChangeForm
from django.core.validators import RegexValidator
from django.conf import settings
from .models import Usuario, InstitucionalConfig, FeedPost, AssejurNews, AssejurInformativo
import secrets
import string


class LoginForm(AuthenticationForm):
    """
    Formul√°rio de login personalizado para CPF
    """
    username = forms.CharField(
        label='CPF',
        max_length=14,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'XXX.XXX.XXX-XX',
            'autocomplete': 'username'
        }),
        validators=[
            RegexValidator(
                regex=r'^\d{3}\.\d{3}\.\d{3}-\d{2}$',
                message='CPF deve estar no formato XXX.XXX.XXX-XX'
            )
        ]
    )
    
    password = forms.CharField(
        label='Senha',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite sua senha',
            'autocomplete': 'current-password'
        })
    )
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['username'].widget.attrs.update({'class': 'form-control'})
        self.fields['password'].widget.attrs.update({'class': 'form-control'})


class UsuarioCreationForm(UserCreationForm):
    """
    Formul√°rio para cria√ß√£o de usu√°rios com senha padr√£o
    """
    first_name = forms.CharField(
        label='Nome',
        max_length=30,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite o nome'
        })
    )
    
    last_name = forms.CharField(
        label='Sobrenome',
        max_length=30,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite o sobrenome'
        })
    )
    
    email = forms.EmailField(
        label='E-mail',
        required=True,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite o e-mail'
        })
    )
    
    tipo_usuario = forms.ChoiceField(
        label='Tipo de Usu√°rio',
        choices=Usuario.TIPO_USUARIO_CHOICES,
        widget=forms.Select(attrs={
            'class': 'form-select'
        })
    )
    
    ativo = forms.BooleanField(
        label='Usu√°rio Ativo',
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        })
    )
    
    class Meta:
        model = Usuario
        fields = ('username', 'first_name', 'last_name', 'email', 'tipo_usuario', 'ativo')
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Remover campos de senha do formul√°rio
        if 'password1' in self.fields:
            del self.fields['password1']
        if 'password2' in self.fields:
            del self.fields['password2']
        
        # Configurar widgets com classes CSS
        self.fields['username'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'XXX.XXX.XXX-XX'
        })
    
    def save(self, commit=True):
        # Criar usu√°rio sem chamar super().save() para evitar depend√™ncia dos campos de senha
        user = self.instance
        if not user.pk:
            user = self.Meta.model()
        
        # Preencher os campos do usu√°rio
        user.username = self.cleaned_data['username']
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']
        user.email = self.cleaned_data['email']
        user.tipo_usuario = self.cleaned_data['tipo_usuario']
        user.is_active = self.cleaned_data['ativo']
        
        # Definir senha padr√£o
        senha_padrao = 'abmepi2025'
        user.set_password(senha_padrao)
        
        # Marcar como primeiro acesso (deve alterar senha)
        user.primeiro_acesso = True
        
        # Armazenar senha tempor√°ria para visualiza√ß√£o de administradores
        from django.utils import timezone
        from datetime import timedelta
        
        user.senha_temporaria = senha_padrao
        user.senha_temporaria_expira = timezone.now() + timedelta(hours=24)  # Expira em 24 horas
        
        if commit:
            user.save()
            
            # VINCULA√á√ÉO AUTOM√ÅTICA BASEADA NO TIPO DE USU√ÅRIO
            self._vincular_usuario_automaticamente(user)
            
        return user
    
    def _vincular_usuario_automaticamente(self, user):
        """
        Vincula automaticamente o usu√°rio ao registro correspondente baseado no tipo
        """
        try:
            print(f"üîó Iniciando vincula√ß√£o autom√°tica para usu√°rio {user.username} (tipo: {user.tipo_usuario})")
            
            if user.tipo_usuario == 'associado':
                self._vincular_associado(user)
            elif user.tipo_usuario == 'advogado':
                self._vincular_advogado(user)
            elif user.tipo_usuario == 'psicologo':
                self._vincular_psicologo(user)
            else:
                print(f"‚ÑπÔ∏è Tipo de usu√°rio '{user.tipo_usuario}' n√£o requer vincula√ß√£o autom√°tica")
                
        except Exception as e:
            print(f"‚ùå Erro na vincula√ß√£o autom√°tica: {e}")
            import traceback
            traceback.print_exc()
    
    def _vincular_associado(self, user):
        """Vincula usu√°rio a um associado existente"""
        try:
            from associados.models import Associado
            
            # Buscar associado pelo CPF
            associado = Associado.objects.get(cpf=user.username)
            
            if associado.usuario:
                print(f"‚ö†Ô∏è Associado {associado.nome} j√° tem usu√°rio vinculado: {associado.usuario.username}")
                if associado.usuario != user:
                    print(f"üîÑ Substituindo usu√°rio de {associado.usuario.username} para {user.username}")
            else:
                print(f"‚úÖ Associado {associado.nome} n√£o tem usu√°rio - vinculando")
            
            # Vincular usu√°rio ao associado
            associado.usuario = user
            associado.save()
            
            print(f"‚úÖ VINCULA√á√ÉO ASSOCIADO CONCLU√çDA: {associado.nome}")
            
        except Associado.DoesNotExist:
            print(f"‚ö†Ô∏è Nenhum associado encontrado com CPF {user.username}")
            print(f"üí° Criando registro b√°sico de associado...")
            
            # Criar registro b√°sico de associado
            try:
                from associados.models import Associado
                from datetime import date
                
                associado = Associado.objects.create(
                    usuario=user,
                    nome=f"{user.first_name} {user.last_name}".strip(),
                    cpf=user.username,
                    rg="000000000",  # RG tempor√°rio
                    data_nascimento=date(1990, 1, 1),  # Data padr√£o
                    sexo='M',  # Padr√£o masculino
                    estado_civil='solteiro',  # Padr√£o solteiro
                    nacionalidade='Brasileira',
                    email=user.email,
                    telefone="(00) 00000-0000",
                    celular="(00) 00000-0000",
                    cep="00000-000",
                    rua="Rua n√£o informada",
                    numero="000",
                    bairro="Bairro n√£o informado",
                    cidade="Cidade n√£o informada",
                    estado="XX",
                    tipo_socio='efetivo',  # Padr√£o efetivo
                    tipo_profissional='militar',  # Padr√£o militar
                    matricula_militar="000000000",
                    posto_graduacao="Soldado",
                    nome_civil=f"{user.first_name} {user.last_name}".strip(),
                    unidade_lotacao="Unidade n√£o informada",
                    data_ingresso=date.today(),
                    situacao='ativo',
                    ativo=True,
                    observacoes="Registro criado automaticamente - dados precisam ser atualizados"
                )
                print(f"‚úÖ REGISTRO DE ASSOCIADO CRIADO: {associado.nome}")
                
            except Exception as e:
                print(f"‚ùå Erro ao criar associado: {e}")
                import traceback
                traceback.print_exc()
        except Exception as e:
            print(f"‚ùå Erro ao vincular associado: {e}")
            import traceback
            traceback.print_exc()
    
    def _vincular_advogado(self, user):
        """Vincula usu√°rio a um advogado existente"""
        try:
            from assejus.models import Advogado
            
            # Buscar advogado pelo CPF
            advogado = Advogado.objects.get(cpf=user.username)
            
            if advogado.user:
                print(f"‚ö†Ô∏è Advogado {advogado.nome} j√° tem usu√°rio vinculado: {advogado.user.username}")
                if advogado.user != user:
                    print(f"üîÑ Substituindo usu√°rio de {advogado.user.username} para {user.username}")
            else:
                print(f"‚úÖ Advogado {advogado.nome} n√£o tem usu√°rio - vinculando")
            
            # Vincular usu√°rio ao advogado
            advogado.user = user
            advogado.save()
            
            print(f"‚úÖ VINCULA√á√ÉO ADVOGADO CONCLU√çDA: {advogado.nome}")
            
        except Advogado.DoesNotExist:
            print(f"‚ö†Ô∏è Nenhum advogado encontrado com CPF {user.username}")
            print(f"üí° Criando registro b√°sico de advogado...")
            
            # Criar registro b√°sico de advogado
            try:
                from assejus.models import Advogado
                from datetime import date
                
                advogado = Advogado.objects.create(
                    user=user,
                    nome=f"{user.first_name} {user.last_name}".strip(),
                    cpf=user.username,
                    oab="000000/XX",  # OAB tempor√°rio
                    uf_oab="XX",
                    email=user.email,
                    telefone="(00) 00000-0000",
                    endereco="Endere√ßo n√£o informado",
                    cidade="Cidade n√£o informada",
                    estado="XX",
                    cep="00000-000",
                    data_inscricao_oab=date(2024, 1, 1),
                    experiencia_anos=0,
                    ativo=True,
                    observacoes="Registro criado automaticamente - dados precisam ser atualizados"
                )
                print(f"‚úÖ REGISTRO DE ADVOGADO CRIADO: {advogado.nome}")
                
            except Exception as e:
                print(f"‚ùå Erro ao criar advogado: {e}")
        except Exception as e:
            print(f"‚ùå Erro ao vincular advogado: {e}")
    
    def _vincular_psicologo(self, user):
        """Vincula usu√°rio a um psic√≥logo existente"""
        try:
            from psicologia.models import Psicologo
            
            # Buscar psic√≥logo pelo CPF
            psicologo = Psicologo.objects.get(cpf=user.username)
            
            if psicologo.user:
                print(f"‚ö†Ô∏è Psic√≥logo {psicologo.nome_completo} j√° tem usu√°rio vinculado: {psicologo.user.username}")
                if psicologo.user != user:
                    print(f"üîÑ Substituindo usu√°rio de {psicologo.user.username} para {user.username}")
            else:
                print(f"‚úÖ Psic√≥logo {psicologo.nome_completo} n√£o tem usu√°rio - vinculando")
            
            # Vincular usu√°rio ao psic√≥logo
            psicologo.user = user
            psicologo.save()
            
            print(f"‚úÖ VINCULA√á√ÉO PSIC√ìLOGO CONCLU√çDA: {psicologo.nome_completo}")
            
        except Psicologo.DoesNotExist:
            print(f"‚ö†Ô∏è Nenhum psic√≥logo encontrado com CPF {user.username}")
            print(f"üí° Criando registro b√°sico de psic√≥logo...")
            
            # Criar registro b√°sico de psic√≥logo
            try:
                from psicologia.models import Psicologo
                from datetime import date
                
                psicologo = Psicologo.objects.create(
                    user=user,
                    nome_completo=f"{user.first_name} {user.last_name}".strip(),
                    cpf=user.username,
                    crp="000000/XX",  # CRP tempor√°rio
                    uf_crp="XX",
                    email=user.email,
                    telefone="(00) 00000-0000",
                    endereco="Endere√ßo n√£o informado",
                    cidade="Cidade n√£o informada",
                    estado="XX",
                    cep="00000-000",
                    data_nascimento=date(1990, 1, 1),
                    ativo=True,
                    observacoes="Registro criado automaticamente - dados precisam ser atualizados"
                )
                print(f"‚úÖ REGISTRO DE PSIC√ìLOGO CRIADO: {psicologo.nome_completo}")
                
            except Exception as e:
                print(f"‚ùå Erro ao criar psic√≥logo: {e}")
                import traceback
                traceback.print_exc()
        except Exception as e:
            print(f"‚ùå Erro ao vincular psic√≥logo: {e}")
            import traceback
            traceback.print_exc()


class UsuarioChangeForm(UserChangeForm):
    """
    Formul√°rio para edi√ß√£o de usu√°rios
    """
    password1 = forms.CharField(
        label='Nova Senha',
        required=False,
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Deixe em branco para manter a senha atual'
        })
    )
    
    password2 = forms.CharField(
        label='Confirmar Nova Senha',
        required=False,
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Confirme a nova senha'
        })
    )
    
    gerar_nova_senha = forms.BooleanField(
        label='Gerar Nova Senha Automaticamente',
        required=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input',
            'onclick': 'togglePasswordFields()'
        })
    )
    
    senha_atual_info = forms.CharField(
        label='Senha Atual',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'readonly': True,
            'placeholder': 'Senha tempor√°ria vis√≠vel apenas para administradores'
        })
    )
    
    class Meta:
        model = Usuario
        fields = ('username', 'first_name', 'last_name', 'email', 'tipo_usuario', 'ativo')
        widgets = {
            'username': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'first_name': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'last_name': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control'
            }),
            'tipo_usuario': forms.Select(attrs={
                'class': 'form-select'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Se √© uma edi√ß√£o (tem instance), mostrar informa√ß√µes da senha atual
        if self.instance and self.instance.pk:
            # Verificar se a senha tempor√°ria ainda √© v√°lida
            from django.utils import timezone
            if (hasattr(self.instance, 'senha_temporaria') and 
                self.instance.senha_temporaria and 
                hasattr(self.instance, 'senha_temporaria_expira') and
                self.instance.senha_temporaria_expira and
                self.instance.senha_temporaria_expira > timezone.now()):
                
                self.fields['senha_atual_info'].initial = self.instance.senha_temporaria
                self.fields['senha_atual_info'].help_text = f"Expira em: {self.instance.senha_temporaria_expira.strftime('%d/%m/%Y %H:%M')}"
            else:
                self.fields['senha_atual_info'].initial = "Senha tempor√°ria expirada ou n√£o dispon√≠vel"
                self.fields['senha_atual_info'].help_text = "Use 'Redefinir Senha' para gerar uma nova senha vis√≠vel"
    
    def clean_password2(self):
        password1 = self.cleaned_data.get('password1')
        password2 = self.cleaned_data.get('password2')
        
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError('As senhas n√£o coincidem.')
        
        return password2


class UsuarioProfileForm(forms.ModelForm):
    """
    Formul√°rio para perfil do usu√°rio (primeiro acesso)
    """
    nova_senha = forms.CharField(
        label='Nova Senha',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite a nova senha'
        })
    )
    
    confirmar_senha = forms.CharField(
        label='Confirmar Senha',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Confirme a nova senha'
        })
    )
    
    class Meta:
        model = Usuario
        fields = ('first_name', 'last_name', 'email', 'nova_senha', 'confirmar_senha')
        widgets = {
            'first_name': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'last_name': forms.TextInput(attrs={
                'class': 'form-control'
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control'
            }),
        }
    
    def clean_confirmar_senha(self):
        nova_senha = self.cleaned_data.get('nova_senha')
        confirmar_senha = self.cleaned_data.get('confirmar_senha')
        
        if nova_senha and confirmar_senha and nova_senha != confirmar_senha:
            raise forms.ValidationError('As senhas n√£o coincidem.')
        
        return confirmar_senha
    
    def save(self, commit=True):
        user = super().save(commit=False)
        if self.cleaned_data['nova_senha']:
            user.set_password(self.cleaned_data['nova_senha'])
            user.primeiro_acesso = False
        if commit:
            user.save()
        return user


class InstitucionalConfigForm(forms.ModelForm):
    """
    Formul√°rio para configura√ß√µes institucionais
    """
    class Meta:
        model = InstitucionalConfig
        fields = '__all__'
        widgets = {
            'nome_instituicao': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Nome da institui√ß√£o'
            }),
            'slogan': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Slogan da institui√ß√£o'
            }),
            'endereco': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Endere√ßo completo'
            }),
            'telefone': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '(XX) XXXX-XXXX'
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control',
                'placeholder': 'contato@instituicao.com'
            }),
            'website': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://www.instituicao.com'
            }),
            'cnpj': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'XX.XXX.XXX/XXXX-XX'
            }),
            'logo': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'favicon': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'cor_primaria': forms.TextInput(attrs={
                'class': 'form-control',
                'style': 'width: 60px; height: 38px;'
            }),
            'cor_secundaria': forms.TextInput(attrs={
                'class': 'form-control',
                'style': 'width: 60px; height: 38px;'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            # Widgets para campos de servi√ßos
            'servicos_juridicos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_psicologicos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_medicos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_odontologicos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_financeiros': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_educacionais': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_recreativos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_sociais': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_esportivos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_culturais': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'servicos_hotel_transito': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'mostrar_estatisticas': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'mostrar_servicos': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'mostrar_sobre': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'mostrar_cta': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Adicionar classes CSS para campos espec√≠ficos
        for field_name, field in self.fields.items():
            if field_name in ['ativo', 'mostrar_estatisticas', 'mostrar_servicos', 'mostrar_sobre', 'mostrar_cta'] or field_name.startswith('servicos_'):
                field.widget.attrs.update({'class': 'form-check-input'})
            elif field_name in ['cor_primaria', 'cor_secundaria']:
                field.widget.attrs.update({'class': 'form-control'})
                field.widget.attrs['type'] = 'color'
            else:
                field.widget.attrs.update({'class': 'form-control'})


class FeedPostForm(forms.ModelForm):
    """
    Formul√°rio para posts do feed institucional
    """
    class Meta:
        model = FeedPost
        fields = [
            'titulo', 'conteudo', 'tipo_post', 'imagem', 'autor', 
            'ativo', 'destaque', 'ordem_exibicao'
        ]
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'T√≠tulo da not√≠cia'
            }),
            'conteudo': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 6,
                'placeholder': 'Conte√∫do da not√≠cia'
            }),
            'tipo_post': forms.Select(attrs={
                'class': 'form-select'
            }),
            'imagem': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'autor': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Autor do post'
            }),
            'destaque': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'ordem_exibicao': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '0'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Adicionar classes CSS para campos espec√≠ficos
        for field_name, field in self.fields.items():
            if field_name in ['destaque', 'ativo']:
                field.widget.attrs.update({'class': 'form-check-input'})
            elif field_name in ['tipo_post']:
                field.widget.attrs.update({'class': 'form-select'})
            else:
                field.widget.attrs.update({'class': 'form-control'})
    
    def clean_titulo(self):
        titulo = self.cleaned_data.get('titulo')
        if not titulo or len(titulo.strip()) == 0:
            raise forms.ValidationError('O t√≠tulo √© obrigat√≥rio.')
        return titulo.strip()
    
    def clean_conteudo(self):
        conteudo = self.cleaned_data.get('conteudo')
        if not conteudo or len(conteudo.strip()) == 0:
            raise forms.ValidationError('O conte√∫do √© obrigat√≥rio.')
        return conteudo.strip()
    
    def clean_autor(self):
        autor = self.cleaned_data.get('autor')
        if not autor or len(autor.strip()) == 0:
            raise forms.ValidationError('O autor √© obrigat√≥rio.')
        return autor.strip()


class AssejurNewsForm(forms.ModelForm):
    """
    Formul√°rio para not√≠cias da Assessoria Jur√≠dica
    """
    class Meta:
        model = AssejurNews
        fields = [
            'titulo', 'resumo', 'conteudo', 'categoria', 'icone', 'prioridade', 
            'link_externo', 'tags', 'imagem', 'ativo', 'destaque'
        ]
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'T√≠tulo da not√≠cia jur√≠dica'
            }),
            'resumo': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Resumo da not√≠cia'
            }),
            'conteudo': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 6,
                'placeholder': 'Conte√∫do completo da not√≠cia'
            }),
            'categoria': forms.Select(attrs={
                'class': 'form-select'
            }),
            'icone': forms.Select(attrs={
                'class': 'form-select'
            }),
            'prioridade': forms.Select(attrs={
                'class': 'form-select'
            }),
            'link_externo': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://exemplo.com/noticia'
            }),
            'tags': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Tags separadas por v√≠rgula'
            }),
            'imagem': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'destaque': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Adicionar classes CSS para campos espec√≠ficos
        for field_name, field in self.fields.items():
            if field_name in ['destaque', 'ativo']:
                field.widget.attrs.update({'class': 'form-check-input'})
            elif field_name in ['categoria', 'icone', 'prioridade']:
                field.widget.attrs.update({'class': 'form-select'})
            else:
                field.widget.attrs.update({'class': 'form-control'})


class AssejurInformativoForm(forms.ModelForm):
    """
    Formul√°rio para informativos da Assessoria Jur√≠dica
    """
    class Meta:
        model = AssejurInformativo
        fields = [
            'titulo', 'conteudo', 'icone', 'cor_icone', 
            'prioridade', 'ordem_exibicao', 'ativo'
        ]
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'T√≠tulo do informativo'
            }),
            'conteudo': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Conte√∫do do informativo'
            }),
            'icone': forms.Select(attrs={
                'class': 'form-select'
            }),
            'cor_icone': forms.TextInput(attrs={
                'class': 'form-control',
                'style': 'width: 60px; height: 38px;'
            }),
            'prioridade': forms.Select(attrs={
                'class': 'form-select'
            }),
            'ordem_exibicao': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '0'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Adicionar classes CSS para campos espec√≠ficos
        for field_name, field in self.fields.items():
            if field_name == 'ativo':
                field.widget.attrs.update({'class': 'form-check-input'})
            elif field_name in ['icone', 'prioridade']:
                field.widget.attrs.update({'class': 'form-select'})
            elif field_name == 'cor_icone':
                field.widget.attrs.update({'class': 'form-control'})
                field.widget.attrs['type'] = 'color'
            else:
                field.widget.attrs.update({'class': 'form-control'})


class PasswordResetRequestForm(forms.Form):
    """
    Formul√°rio para solicitar redefini√ß√£o de senha
    """
    cpf = forms.CharField(
        label='CPF',
        max_length=14,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'XXX.XXX.XXX-XX'
        }),
        validators=[
            RegexValidator(
                regex=r'^\d{3}\.\d{3}\.\d{3}-\d{2}$',
                message='CPF deve estar no formato XXX.XXX.XXX-XX'
            )
        ]
    )
    
    email = forms.EmailField(
        label='E-mail',
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite o e-mail cadastrado'
        })
    )


class PasswordResetConfirmForm(forms.Form):
    """
    Formul√°rio para confirmar nova senha
    """
    password1 = forms.CharField(
        label='Nova Senha',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Digite a nova senha'
        })
    )
    
    password2 = forms.CharField(
        label='Confirmar Senha',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': 'Confirme a nova senha'
        })
    )
    
    def clean_password2(self):
        password1 = self.cleaned_data.get('password1')
        password2 = self.cleaned_data.get('password2')
        
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError('As senhas n√£o coincidem.')
        
        return password2


class UsuarioSearchForm(forms.Form):
    """
    Formul√°rio de busca para usu√°rios
    """
    q = forms.CharField(
        label='Buscar',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Nome, CPF ou e-mail...'
        })
    )
    
    tipo_usuario = forms.ChoiceField(
        label='Tipo de Usu√°rio',
        required=False,
        choices=[('', 'Todos')] + Usuario.TIPO_USUARIO_CHOICES,
        widget=forms.Select(attrs={
            'class': 'form-select'
        })
    )
    
    ativo = forms.ChoiceField(
        label='Status',
        required=False,
        choices=[
            ('', 'Todos'),
            ('true', 'Ativo'),
            ('false', 'Inativo')
        ],
        widget=forms.Select(attrs={
            'class': 'form-select'
        })
    )
    
    data_criacao_inicio = forms.DateField(
        label='Data de Cria√ß√£o (In√≠cio)',
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control'
        })
    )
    
    data_criacao_fim = forms.DateField(
        label='Data de Cria√ß√£o (Fim)',
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control'
        })
    )


def generate_secure_password(length=8):
    """
    Gera uma senha segura seguindo o padr√£o do sistema
    Padr√£o: 2 letras mai√∫sculas + 2 letras min√∫sculas + 2 n√∫meros + 2 caracteres especiais
    """
    # Padr√£o: 2 letras mai√∫sculas + 2 letras min√∫sculas + 2 n√∫meros + 2 caracteres especiais
    letras_maiusculas = ''.join(secrets.choice(string.ascii_uppercase) for _ in range(2))
    letras_minusculas = ''.join(secrets.choice(string.ascii_lowercase) for _ in range(2))
    numeros = ''.join(secrets.choice(string.digits) for _ in range(2))
    caracteres_especiais = ''.join(secrets.choice('!@#$%^&*') for _ in range(2))
    
    # Combinar e embaralhar
    senha = letras_maiusculas + letras_minusculas + numeros + caracteres_especiais
    senha_lista = list(senha)
    secrets.SystemRandom().shuffle(senha_lista)
    
    return ''.join(senha_lista)


# =============================================================================
# FORMUL√ÅRIOS PARA ATAS DE REUNI√ÉO - EDITOR AVAN√áADO
# =============================================================================

class AtaReuniaoEditorForm(forms.ModelForm):
    """
    Formul√°rio avan√ßado para atas de reuni√£o com editor similar ao SEI
    Sistema completo com editor de texto rico e funcionalidades avan√ßadas
    """
    
    def clean_conteudo_completo(self):
        conteudo = self.cleaned_data.get('conteudo_completo')
        # Permitir conte√∫do vazio para cria√ß√£o inicial
        return conteudo
    
    def clean(self):
        cleaned_data = super().clean()
        
        # Debug: imprimir dados do formul√°rio
        print("=" * 50)
        print("DEBUG AtaReuniaoEditorForm.clean()")
        print(f"cleaned_data: {cleaned_data}")
        print(f"errors: {self.errors}")
        print("=" * 50)
        
        return cleaned_data
    
    class Meta:
        from diretoria.models import AtaReuniao
        model = AtaReuniao
        fields = [
            'titulo', 'tipo_reuniao', 'data_reuniao', 'local',
            'presidente', 'secretario', 'pauta', 'deliberacoes', 
            'observacoes', 'conteudo_completo'
        ]
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'T√≠tulo da reuni√£o',
                'id': 'titulo-edit'
            }),
            'tipo_reuniao': forms.Select(attrs={
                'class': 'form-select',
                'id': 'tipo-reuniao-edit'
            }),
            'data_reuniao': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local',
                'id': 'id_data_reuniao'
            }),
            'local': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Cidade-UF',
                'id': 'local-edit'
            }),
            'presidente': forms.Select(attrs={
                'class': 'form-select',
                'id': 'presidente-edit'
            }),
            'secretario': forms.Select(attrs={
                'class': 'form-select',
                'id': 'secretario-edit'
            }),
            'pauta': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Pauta da reuni√£o',
                'id': 'pauta-edit'
            }),
            'deliberacoes': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 6,
                'placeholder': 'Delibera√ß√µes da reuni√£o',
                'id': 'deliberacoes-edit'
            }),
            'observacoes': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Observa√ß√µes adicionais',
                'id': 'observacoes-edit'
            }),
            'conteudo_completo': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 20,
                'placeholder': 'Conte√∫do completo da ata com formata√ß√£o avan√ßada',
                'id': 'id_conteudo_completo_editor',
                'required': False
            })
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Configurar campos obrigat√≥rios
        self.fields['titulo'].required = True
        self.fields['tipo_reuniao'].required = True
        self.fields['data_reuniao'].required = True
        self.fields['local'].required = True
        self.fields['pauta'].required = True
        self.fields['deliberacoes'].required = True
        self.fields['conteudo_completo'].required = False
        
        # Configurar labels personalizados
        self.fields['local'].label = 'Cidade-UF'
        
        # Configurar op√ß√µes do tipo de reuni√£o
        try:
            from diretoria.models import AtaReuniao
            self.fields['tipo_reuniao'].choices = AtaReuniao.TIPO_REUNIAO_CHOICES
        except ImportError:
            pass
        
        # Configurar querysets para presidente e secretario
        try:
            from diretoria.models import MembroDiretoria
            membros_ativos = MembroDiretoria.objects.filter(ativo=True).select_related('associado', 'cargo')
            self.fields['presidente'].queryset = membros_ativos
            self.fields['secretario'].queryset = membros_ativos
        except ImportError:
            pass
        
        # Definir valor padr√£o para data_reuniao se n√£o estiver preenchido
        if not self.instance.pk:  # Apenas para novas atas
            from django.utils import timezone
            self.fields['data_reuniao'].initial = timezone.now()
    
    def clean_conteudo_completo(self):
        """Valida√ß√£o do conte√∫do completo"""
        conteudo = self.cleaned_data.get('conteudo_completo', '').strip()
        # Campo √© opcional, n√£o precisa validar se est√° vazio
        return conteudo


class AtaReuniaoTemplateForm(forms.Form):
    """
    Formul√°rio para sele√ß√£o de templates de atas
    """
    TEMPLATE_CHOICES = [
        ('', 'Selecione um template...'),
        ('basico', 'Ata B√°sica - Estrutura Simples'),
        ('completa', 'Ata Completa - Formato Oficial'),
        ('extraordinaria', 'Reuni√£o Extraordin√°ria'),
        ('emergencia', 'Reuni√£o de Emerg√™ncia'),
        ('aprovacao', 'Ata de Aprova√ß√£o de Contas'),
        ('eleicao', 'Ata de Elei√ß√£o'),
        ('custom', 'Template Personalizado')
    ]
    
    template = forms.ChoiceField(
        choices=TEMPLATE_CHOICES,
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'id_template_ata',
            'onchange': 'aplicarTemplateAta()'
        }),
        label='Template da Ata'
    )
    
    titulo_template = forms.CharField(
        max_length=200,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'T√≠tulo personalizado para a ata',
            'id': 'id_titulo_template'
        }),
        label='T√≠tulo Personalizado'
    )


class AtaReuniaoSearchForm(forms.Form):
    """
    Formul√°rio de busca e filtros para atas de reuni√£o
    """
    
    # Campo de busca
    search = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Buscar por t√≠tulo, local ou conte√∫do...',
            'id': 'search_atas'
        }),
        label='Buscar'
    )
    
    # Filtros
    tipo_reuniao = forms.ChoiceField(
        required=False,
        choices=[('', 'Todos os tipos')] + [
            ('ordinaria', 'Reuni√£o Ordin√°ria'),
            ('extraordinaria', 'Reuni√£o Extraordin√°ria'),
            ('emergencia', 'Reuni√£o de Emerg√™ncia'),
            ('especial', 'Reuni√£o Especial'),
        ],
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'filtro_tipo'
        }),
        label='Tipo de Reuni√£o'
    )
    
    data_inicio = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'id': 'data_inicio'
        }),
        label='Data In√≠cio'
    )
    
    data_fim = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'id': 'data_fim'
        }),
        label='Data Fim'
    )
    
    aprovada = forms.ChoiceField(
        required=False,
        choices=[
            ('', 'Todas'),
            ('true', 'Aprovadas'),
            ('false', 'N√£o Aprovadas')
        ],
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'filtro_aprovacao'
        }),
        label='Status de Aprova√ß√£o'
    )
    
    def clean(self):
        """Valida√ß√£o cruzada dos campos"""
        cleaned_data = super().clean()
        data_inicio = cleaned_data.get('data_inicio')
        data_fim = cleaned_data.get('data_fim')
        
        if data_inicio and data_fim and data_inicio > data_fim:
            raise forms.ValidationError('Data de in√≠cio deve ser anterior √† data de fim.')
        
        return cleaned_data


# =============================================================================
# FORMUL√ÅRIOS PARA DOCUMENTOS DE PROCESSOS JUR√çDICOS
# =============================================================================

class DocumentoProcessoForm(forms.ModelForm):
    """
    Formul√°rio para upload de documentos em processos jur√≠dicos
    Sistema completo com valida√ß√µes e funcionalidades avan√ßadas
    """
    
    class Meta:
        from assejus.models import DocumentoJuridico
        model = DocumentoJuridico
        fields = ['titulo', 'tipo_documento', 'descricao', 'arquivo']
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ex: Peti√ß√£o Inicial, Senten√ßa, Despacho...',
                'maxlength': '200'
            }),
            'tipo_documento': forms.Select(attrs={
                'class': 'form-select',
                'id': 'id_tipo_documento'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Descri√ß√£o detalhada do documento (opcional)',
                'maxlength': '1000'
            }),
            'arquivo': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': '.pdf,.doc,.docx,.jpg,.jpeg,.png,.txt,.rtf',
                'id': 'id_arquivo_single'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        # Extrair par√¢metros espec√≠ficos
        self.processo_id = kwargs.pop('processo_id', None)
        self.usuario = kwargs.pop('usuario', None)
        
        super().__init__(*args, **kwargs)
        
        # Se processo_id foi fornecido, pr√©-selecionar
        if self.processo_id:
            try:
                from assejus.models import ProcessoJuridico
                processo = ProcessoJuridico.objects.get(pk=self.processo_id)
                self.processo_info = processo
                print(f"‚úÖ Processo pr√©-selecionado: {processo.numero_processo}")
            except ProcessoJuridico.DoesNotExist:
                print(f"‚ùå Processo com ID {self.processo_id} n√£o encontrado")
        
        # Adicionar classes CSS e configura√ß√µes
        self._configurar_widgets()
    
    def _configurar_widgets(self):
        """Configura widgets com classes CSS e atributos"""
        for field_name, field in self.fields.items():
            if hasattr(field.widget, 'attrs'):
                if 'class' not in field.widget.attrs:
                    field.widget.attrs['class'] = 'form-control'
                elif 'form-control' not in field.widget.attrs['class']:
                    field.widget.attrs['class'] += ' form-control'
    
    def clean_arquivo(self):
        """Valida√ß√£o do arquivo √∫nico"""
        arquivo = self.cleaned_data.get('arquivo')
        if arquivo:
            return self._validar_arquivo(arquivo)
        return arquivo
    

    
    def _validar_arquivo(self, arquivo):
        """Valida√ß√£o comum para arquivos"""
        if not arquivo:
            return arquivo
        
        # Verificar tamanho (m√°x. 10MB)
        max_size = 10 * 1024 * 1024  # 10MB
        if arquivo.size > max_size:
            raise forms.ValidationError(
                f'Arquivo muito grande. Tamanho m√°ximo permitido: 10MB. '
                f'Tamanho atual: {arquivo.size / (1024*1024):.1f}MB'
            )
        
        # Verificar extens√£o
        extensoes_permitidas = ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png', '.txt', '.rtf']
        nome_arquivo = arquivo.name.lower()
        if not any(nome_arquivo.endswith(ext) for ext in extensoes_permitidas):
            raise forms.ValidationError(
                f'Formato de arquivo n√£o permitido. '
                f'Formatos aceitos: {", ".join(extensoes_permitidas)}'
            )
        
        # Valida√ß√£o de nome do arquivo removida - aceita qualquer nome
        
        return arquivo
    
    def clean_titulo(self):
        """Valida√ß√£o do t√≠tulo"""
        titulo = self.cleaned_data.get('titulo', '').strip()
        if not titulo:
            raise forms.ValidationError('T√≠tulo √© obrigat√≥rio.')
        
        if len(titulo) < 3:
            raise forms.ValidationError('T√≠tulo deve ter pelo menos 3 caracteres.')
        
        return titulo
    
    def save(self, commit=True):
        """Salva o documento com metadados adicionais"""
        documento = super().save(commit=False)
        
        # Definir processo se fornecido
        if self.processo_id:
            from assejus.models import ProcessoJuridico
            documento.processo_id = self.processo_id
        
        # Definir usu√°rio que fez upload
        if self.usuario:
            documento.usuario_upload = self.usuario
        
        if commit:
            documento.save()
        
        return documento


class DocumentoProcessoMultiploForm(forms.Form):
    """
    Formul√°rio para upload m√∫ltiplo de documentos
    """
    
    tipo_documento = forms.ChoiceField(
        choices=[
            ('peticao', 'Peti√ß√£o'),
            ('sentenca', 'Senten√ßa'),
            ('despacho', 'Despacho'),
            ('certidao', 'Certid√£o'),
            ('contrato', 'Contrato'),
            ('comprovante', 'Comprovante'),
            ('outro', 'Outro'),
        ],
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'id_tipo_documento_multiplo'
        }),
        label='Tipo de Documento'
    )
    
    descricao = forms.CharField(
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 2,
            'placeholder': 'Descri√ß√£o geral para todos os documentos (opcional)',
            'maxlength': '1000'
        }),
        label='Descri√ß√£o Geral'
    )
    
    def __init__(self, *args, **kwargs):
        self.processo_id = kwargs.pop('processo_id', None)
        self.usuario = kwargs.pop('usuario', None)
        super().__init__(*args, **kwargs)
    
    def clean(self):
        cleaned_data = super().clean()
        # Valida√ß√µes espec√≠ficas para upload m√∫ltiplo podem ser adicionadas aqui
        return cleaned_data



class DocumentoProcessoSearchForm(forms.Form):
    """
    Formul√°rio de busca e filtros para documentos de processos
    """
    
    # Campo de busca
    search = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Buscar por t√≠tulo, descri√ß√£o ou n√∫mero do processo...',
            'id': 'search_documentos'
        }),
        label='Buscar'
    )
    
    # Filtros
    tipo_documento = forms.ChoiceField(
        required=False,
        choices=[('', 'Todos os tipos')] + [
            ('peticao', 'Peti√ß√£o'),
            ('sentenca', 'Senten√ßa'),
            ('despacho', 'Despacho'),
            ('certidao', 'Certid√£o'),
            ('contrato', 'Contrato'),
            ('comprovante', 'Comprovante'),
            ('outro', 'Outro'),
        ],
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'filtro_tipo'
        }),
        label='Tipo de Documento'
    )
    
    processo = forms.ModelChoiceField(
        required=False,
        queryset=None,  # Ser√° definido no __init__
        empty_label='Todos os processos',
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'filtro_processo'
        }),
        label='Processo'
    )
    
    data_inicio = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'id': 'data_inicio'
        }),
        label='Data In√≠cio'
    )
    
    data_fim = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'id': 'data_fim'
        }),
        label='Data Fim'
    )
    
    usuario_upload = forms.ModelChoiceField(
        required=False,
        queryset=None,  # Ser√° definido no __init__
        empty_label='Todos os usu√°rios',
        widget=forms.Select(attrs={
            'class': 'form-select',
            'id': 'filtro_usuario'
        }),
        label='Usu√°rio Upload'
    )
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Definir querysets din√¢micos
        try:
            from assejus.models import ProcessoJuridico
            from django.contrib.auth.models import User
            
            self.fields['processo'].queryset = ProcessoJuridico.objects.all().order_by('-data_cadastro')
            self.fields['usuario_upload'].queryset = User.objects.filter(
                documentos_upload__isnull=False
            ).distinct().order_by('first_name', 'last_name')
        except ImportError:
            pass
    
    def clean(self):
        """Valida√ß√£o cruzada dos campos"""
        cleaned_data = super().clean()
        data_inicio = cleaned_data.get('data_inicio')
        data_fim = cleaned_data.get('data_fim')
        
        if data_inicio and data_fim and data_inicio > data_fim:
            raise forms.ValidationError('Data de in√≠cio deve ser anterior √† data de fim.')
        
        return cleaned_data


class DocumentoProcessoEditForm(forms.ModelForm):
    """
    Formul√°rio para edi√ß√£o de documentos existentes
    """
    
    class Meta:
        from assejus.models import DocumentoJuridico
        model = DocumentoJuridico
        fields = ['titulo', 'tipo_documento', 'descricao']
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'T√≠tulo do documento',
                'maxlength': '200'
            }),
            'tipo_documento': forms.Select(attrs={
                'class': 'form-select'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Descri√ß√£o do documento',
                'maxlength': '1000'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Adicionar classes CSS
        for field_name, field in self.fields.items():
            if hasattr(field.widget, 'attrs'):
                if 'class' not in field.widget.attrs:
                    field.widget.attrs['class'] = 'form-control'
                elif 'form-control' not in field.widget.attrs['class']:
                    field.widget.attrs['class'] += ' form-control'
    
    def clean_titulo(self):
        """Valida√ß√£o do t√≠tulo"""
        titulo = self.cleaned_data.get('titulo', '').strip()
        if not titulo:
            raise forms.ValidationError('T√≠tulo √© obrigat√≥rio.')
        
        if len(titulo) < 3:
            raise forms.ValidationError('T√≠tulo deve ter pelo menos 3 caracteres.')
        
        return titulo


class DocumentoProcessoReplaceForm(forms.ModelForm):
    """
    Formul√°rio para substituir arquivo de documento existente
    """
    
    class Meta:
        from assejus.models import DocumentoJuridico
        model = DocumentoJuridico
        fields = ['arquivo']
        widgets = {
            'arquivo': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': '.pdf,.doc,.docx,.jpg,.jpeg,.png,.txt,.rtf',
                'id': 'id_novo_arquivo'
            }),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['arquivo'].required = True
        self.fields['arquivo'].help_text = 'Selecione o novo arquivo (m√°x. 10MB)'
    
    def clean_arquivo(self):
        """Valida√ß√£o do novo arquivo"""
        arquivo = self.cleaned_data.get('arquivo')
        if arquivo:
            # Usar a mesma valida√ß√£o do formul√°rio principal
            form_doc = DocumentoProcessoForm()
            return form_doc._validar_arquivo(arquivo)
        return arquivo


class ExPresidenteForm(forms.ModelForm):
    """
    Formul√°rio para gerenciar ex-presidentes
    """
    
    class Meta:
        from .models import ExPresidente
        model = ExPresidente
        fields = [
            'nome', 'posto_graduacao', 'foto', 'periodo_inicio', 
            'periodo_fim', 'biografia', 'principais_realizacoes', 
            'ativo', 'ordem_exibicao'
        ]
        widgets = {
            'nome': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Nome completo do ex-presidente'
            }),
            'posto_graduacao': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Ex: Coronel, Tenente-Coronel, etc.'
            }),
            'foto': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'periodo_inicio': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'date'
            }),
            'periodo_fim': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'date'
            }),
            'biografia': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Biografia do ex-presidente...'
            }),
            'principais_realizacoes': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Principais realiza√ß√µes durante o mandato...'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'ordem_exibicao': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '0',
                'placeholder': 'Ordem de exibi√ß√£o (0 = primeiro)'
            })
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['foto'].required = False
        self.fields['biografia'].required = False
        self.fields['principais_realizacoes'].required = False


class MultipleFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True

class MultipleFileField(forms.FileField):
    def __init__(self, *args, **kwargs):
        kwargs.setdefault("widget", MultipleFileInput())
        super().__init__(*args, **kwargs)

    def clean(self, data, initial=None):
        single_file_clean = super().clean
        if isinstance(data, (list, tuple)):
            result = [single_file_clean(d, initial) for d in data]
        else:
            result = single_file_clean(data, initial)
        return result

class HistoriaAssociacaoForm(forms.ModelForm):
    """
    Formul√°rio para gerenciar marcos hist√≥ricos da associa√ß√£o
    """
    # Campo para upload m√∫ltiplo de imagens
    imagens_galeria = MultipleFileField(
        widget=MultipleFileInput(attrs={
            'class': 'form-control',
            'accept': 'image/*',
            'multiple': True
        }),
        required=False,
        help_text="Selecione m√∫ltiplas imagens para a galeria (Ctrl+clique para selecionar v√°rias)"
    )
    
    class Meta:
        from .models import HistoriaAssociacao
        model = HistoriaAssociacao
        fields = [
            'titulo', 'descricao', 'data_marcante', 'tipo', 
            'imagem', 'ativo', 'destaque', 'ordem_exibicao'
        ]
        widgets = {
            'titulo': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'T√≠tulo do marco hist√≥rico'
            }),
            'descricao': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 5,
                'placeholder': 'Descri√ß√£o detalhada do marco hist√≥rico...'
            }),
            'data_marcante': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'date'
            }, format='%Y-%m-%d'),
            'tipo': forms.Select(attrs={
                'class': 'form-control'
            }),
            'imagem': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'ativo': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'destaque': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'ordem_exibicao': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '0',
                'placeholder': 'Ordem de exibi√ß√£o (0 = primeiro)'
            })
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['imagem'].required = False
        self.fields['imagens_galeria'].required = False
        
        # Garantir que a data seja carregada corretamente para edi√ß√£o
        if self.instance and self.instance.pk and hasattr(self.instance, 'data_marcante') and self.instance.data_marcante:
            # Converter para string no formato YYYY-MM-DD para input type="date"
            formatted_date = self.instance.data_marcante.strftime('%Y-%m-%d')
            # Definir o valor inicial
            self.fields['data_marcante'].initial = formatted_date
            # For√ßar o valor no widget
            self.fields['data_marcante'].widget.attrs.update({'value': formatted_date})
    
    def clean_data_marcante(self):
        """Garantir que a data seja validada corretamente"""
        data = self.cleaned_data.get('data_marcante')
        if data:
            return data
        return None


